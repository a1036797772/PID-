#include <STC12C5A60S2.H>
/*定义管脚*/
#define uchar unsigned char 
#define uint unsigned int
uchar data buffer[8]; //数组
sbit SH_CP = P3^4; //SCK
sbit ST_CP = P3^3;//RCK
sbit DS    = P3^5;//SER
sbit SH_CP2 = P2^6; //SCK2
sbit ST_CP2 = P2^5;//RCK2
sbit DS2    = P2^3;//SER2
sbit RR=P3^6;//红
sbit GG=P2^2;//绿
sbit BB=P2^4;//蓝
sbit ABL=P4^3;//亮度
char data menu,out,amenu,sa,bb,num,cheng,yanse,liangdu; //menu按键左，     out按键右，    amenu按键中，
                                                        //sa串口中断，     bb延时变量，   num频谱显示，
														//cheng行扫描变量，yanse颜色控制, liangdu亮度控制
/*显示缓存,上层需要使用*/
uchar code table_cha[11][8]={0x00,0x18,0x3c,0x7e,0xff,0xff,0xff,0x66,
							0x11, 0x11, 0x11, 0x1F, 0x11, 0x11, 0x0A, 0x04, 
							0x00, 0x78, 0x88, 0x88, 0xF8, 0x88, 0x88, 0x78, 
					 	    0x0C, 0x12, 0x01, 0x01, 0x01, 0x01, 0x12, 0x0C,
							0x30, 0x48, 0x88, 0x88, 0x88, 0x88, 0x48, 0x30,
							0x3c,0x3c,0x18,0x18,0x18,0x18,0x3c,0x3c,
							0x00,0x18,0x3c,0x7e,0xff,0xff,0xff,0x66,
							0x3c,0x7e,0x66,0x66,0x66,0x66,0x66,0x66,
						0x7E, 0x7E, 0x18, 0x18, 0x18, 0x18, 0x7E, 0x7E,
						0x7E, 0x7E, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06,
						0x18, 0x18, 0x18, 0x18, 0x3C, 0x66, 0xC3, 0x81,
						
						};
uchar code table_id[]   ={
0x00, 0x7F, 0x20, 0x10, 0x08, 0x10, 0x20, 0x7F, //M
0x00, 0x00, 0x00, 
0x00, 0x7F, 0x20, 0x10, 0x08, 0x10, 0x20, 0x7F ,// M
0x00, 0x00, 0x00,  
0xFE, 0x10, 0x10, 0x10, 0xFE,0x00, /*H*/
0x3E, 0x48, 0x88, 0x48, 0x3E,0x00, /*A*/
0xFE, 0x90, 0x90, 0x60,0x00, /*P*/
0xFE, 0x90, 0x90, 0x60, 0x00, /*P*/	
0x80, 0x40, 0x20, 0x1E, 0x20, 0x40, 0x80, /*Y*/   
0x00,0x00,0x00,0x00,0x00,0x00,
0xFE, 0x92, 0x92, 0x7C, 0x00, 0x00,//B
0x82, 0x82, 0xFE, 0x82, 0x82, 0x00, //I
0xFE, 0x90, 0x90, 0x6E, 0x00,  //R
0x80, 0x80, 0xFE, 0x80, 0x80, 0x00, //T
0xFE, 0x10, 0x10, 0x10, 0xFE, 0x00,  //H
0xFE, 0x82, 0x82, 0x44, 0x38, 0x00, //D
0x3E, 0x48, 0x88, 0x48, 0x3E, 0x00, //A
0x80, 0x40, 0x20, 0x1E, 0x20, 0x40, 0x80, //Y 
0x00,0x00,0x00,0x00,0x00,0x00,
};

/*railway*/
uchar code dat[128]={0x0,0x20,0x40,0x60,0x80,
0xa0,0xc0,0xe0,0xe4,0xe8,0xec,0xf0,0xf4,0xf8,
0xfc,0xdc,0xbc,0x9c,0x7c,0x5c,0x3c,0x1c,0x18,
0x14,0x10,0xc,0x8,0x4,0x25,0x45,0x65,0x85,0xa5,
0xc5,0xc9,0xcd,0xd1,0xd5,0xd9,0xb9,0x99,0x79,
0x59,0x39,0x35,0x31,0x2d,0x29,0x4a,0x6a,0x8a,
0xaa,0xae,0xb2,0xb6,0x96,0x76,0x56,0x52,0x4e,
0x6f,0x8f,0x93,0x73,0x6f,0x8f,0x93,0x73,0x4a,
0x6a,0x8a,0xaa,0xae,0xb2,0xb6,0x96,0x76,0x56,
0x52,0x4e,0x25,0x45,0x65,0x85,0xa5,0xc5,0xc9,
0xcd,0xd1,0xd5,0xd9,0xb9,0x99,0x79,0x59,0x39,
0x35,0x31,0x2d,0x29,0x0,0x20,0x40,0x60,0x80,
0xa0,0xc0,0xe0,0xe4,0xe8,0xec,0xf0,0xf4,0xf8,
0xfc,0xdc,0xbc,0x9c,0x7c,0x5c,0x3c,0x1c,0x18,
0x14,0x10,0xc,0x8,0x4};
/*railway 2*/
uchar code dat2[28]={0x0,0x20,0x40,0x60,0x80,
0xa0,0xc0,0xe0,0xe4,0xe8,0xec,0xf0,0xf4,0xf8,
0xfc,0xdc,0xbc,0x9c,0x7c,0x5c,0x3c,0x1c,0x18,
0x14,0x10,0xc,0x8,0x4};
/*railway 3*/
uchar code dat3[24]={0x00,0x01,0x02,0x03,0x04,
0x05,0x06,0x16,0x26,0x36,0x46,0x56,0x66,0x65,
0x64,0x63,0x62,0x61,0x60,0x50,0x40,0x30,0x20,0x10};
/*3p char*/
uchar code table_3p[3][8]={0xff,0x89,0xf5,0x93,0x93,0xf5,0x89,0xff,
						   0x0e,0x1f,0x3f,0x7e,0x7e,0x3f,0x1f,0x0e,
						   0x18,0x3c,0x7e,0xff,0x18,0x18,0x18,0x18};
/*************************************************************************/

uint code tab_water[]={
0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0080,0x0140,0x0080,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
0x0000,0x0000,0x0000,0x0000,0x0000,0x0080,0x0140,0x0220,0x0140,0x0080,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
0x0000,0x0000,0x0000,0x0000,0x01c0,0x0220,0x0410,0x0410,0x0410,0x0220,0x01c0,0x0000,0x0000,0x0000,0x0000,0x0000,			 
0x0000,0x0000,0x0000,0x03e0,0x0410,0x0808,0x0808,0x0808,0x0808,0x0808,0x0410,0x03e0,0x0000,0x0000,0x0000,0x0000,
0x0000,0x0000,0x07f0,0x0808,0x1004,0x1004,0x1004,0x1004,0x1004,0x1004,0x1004,0x0808,0x07f0,0x0000,0x0000,0x0000,
0x0000,0x0ff8,0x1004,0x2002,0x2002,0x2002,0x2002,0x2002,0x2002,0x2002,0x2002,0x2002,0x1004,0x0ff8,0x0000,0x0000,
0x1ffc,0x2002,0x4001,0x4001,0x4001,0x4001,0x4001,0x4001,0x4001,0x4001,0x4001,0x4001,0x4001,0x2002,0x1ffc,0x0000
};
char code tab00[]={7,7,7,7,7,7,7,7,6,5,4,3,2,1,0,0,0,0,0,0,0,0,1,2,3,4,5,6,//28
					    8+6,8+6,8+6,8+6,8+6,8+6,8+5,8+4,8+3,8+2,8+1,8+1,8+1,8+1,8+1,8+1,8+2,8+3,8+4,8+5,//20
					    16+5,16+5,16+5,16+5,16+4,16+3,16+2,16+2,16+2,16+2,16+3,16+4,//12
						 24+4,24+4,24+3,24+3,//24+4
						 32+4,32+4,32+3,32+3,
					    40+5,40+5,40+5,40+5,40+4,40+3,40+2,40+2,40+2,40+2,40+3,40+4,//12
					    48+6,48+6,48+6,48+6,48+6,48+6,48+5,48+4,48+3,48+2,48+1,48+1,48+1,48+1,48+1,48+1,48+2,48+3,48+4,48+5,//20
						 56+7,56+7,56+7,56+7,56+7,56+7,56+7,56+7,56+6,56+5,56+4,56+3,56+2,56+1,56+0,56+0,56+0,56+0,56+0,56+0,56+0,56+0,56+1,56+2,56+3,56+4,56+5,56+6//28
};
char code tab10[]={56+7,56+7,56+7,56+7,56+7,56+7,56+7,56+7,56+6,56+5,56+4,56+3,56+2,56+1,56+0,56+0,56+0,56+0,56+0,56+0,56+0,56+0,56+1,56+2,56+3,56+4,56+5,56+6,//56+28
					    48+6,48+6,48+6,48+6,48+6,48+6,48+5,48+4,48+3,48+2,48+1,48+1,48+1,48+1,48+1,48+1,48+2,48+3,48+4,48+5,//20
					    40+5,40+5,40+5,40+5,40+4,40+3,40+2,40+2,40+2,40+2,40+3,40+4,//12
						 32+4,32+4,32+3,32+3,
						 24+4,24+4,24+3,24+3,//24+4
					    16+5,16+5,16+5,16+5,16+4,16+3,16+2,16+2,16+2,16+2,16+3,16+4,//12
					    8+6,8+6,8+6,8+6,8+6,8+6,8+5,8+4,8+3,8+2,8+1,8+1,8+1,8+1,8+1,8+1,8+2,8+3,8+4,8+5,//20
						 7,7,7,7,7,7,7,7,6,5,4,3,2,1,0,0,0,0,0,0,0,0,1,2,3,4,5,6//28
};
char code tab01[]={7,6,5,4,3,2,1,0,0,0,0,0,0,0,0,1,2,3,4,5,6,7,7,7,7,7,7,7,//28
						 6,5,4,3,2,1,1,1,1,1,1,2,3,4,5,6,6,6,6,6,//20
						 5,4,3,2,2,2,2,3,4,5,5,5,//12
						 4,3,3,4,//
						4,3,3,4,
						5,4,3,2,2,2,2,3,4,5,5,5,//12
						6,5,4,3,2,1,1,1,1,1,1,2,3,4,5,6,6,6,6,6,//20
						 7,6,5,4,3,2,1,0,0,0,0,0,0,0,0,1,2,3,4,5,6,7,7,7,7,7,7,7,//28
};
uchar code tab_print[]={//打印函数使用
0X00,0X00,0X81,0XFF,0XFF,0X81,0X00,0X00,//I
0X1C,0X3E,0X7E,0XFC,0XFC,0X7E,0X3E,0X1C,//心
0X3F,0X7F,0X80,0X80,0X80,0X80,0X7F,0X3F,//U
0X3C,0X42,0X14,0XA1,0XA1,0X14,0X42,0X3C,//笑脸
0X00,0X73,0XE9,0X89,0X89,0X8F,0X4F,0X00,//5
0X00,0XC6,0X86,0X89,0X99,0XB1,0XE7,0XC6,//2
0X3C,0X7E,0X81,0X81,0X81,0X7E,0X3C,0X00,//0
0X00,0X00,0X3C,0X3C,0X3C,0X3C,0X00,0X00,//正方形
0X20,0X30,0X38,0X3C,0X3C,0X38,0X30,0X20,//三角形
0X08,0X14,0X22,0X77,0X14,0X14,0X14,0X1C,//箭头
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,//全亮
0X00,0X00,0X80,0XFF,0XFF,0X82,0X00,0X00,//1
0X00,0X76,0XFF,0X89,0X89,0X81,0XC2,0X00,//3
0X00,0X00,0X80,0XFF,0XFF,0X82,0X00,0X00,//1
0X20,0XA0,0XFF,0XFF,0XA3,0X22,0X3C,0X30//4
};
char code tab_mian[]={4,3,7,2,0,6,1,5};
char code tab_xian[]={5,0,3,6,1,7,4,2};
char code tab_dian[]={
0,1,3,4,7,2,6,5,
1,7,5,0,4,2,3,6,
1,6,4,0,7,5,2,3,
5,7,4,2,0,1,6,3,
1,6,3,4,5,2,0,7,
6,7,1,5,4,2,0,3,
2,0,3,1,5,7,6,4,
5,2,1,0,3,6,7,4,

0,7,4,3,2,6,5,1,
4,7,2,6,5,3,1,0,
0,1,4,3,2,5,6,7,
3,6,7,2,1,4,0,5,
5,2,1,0,7,6,4,3,
1,4,0,2,3,5,7,6,
4,2,1,5,6,0,7,3,
0,4,7,3,1,5,2,6,

1,0,6,7,4,5,3,2,
6,0,4,2,7,5,1,3,
3,1,2,6,7,5,0,4,
2,4,1,0,6,5,3,7,
6,2,1,5,7,4,3,0,
1,0,5,3,2,6,7,4,
7,1,0,4,2,5,6,3,
6,4,1,0,2,5,7,3,

2,6,7,0,3,5,1,4,
6,3,7,2,1,4,5,0,
7,0,5,6,1,3,4,2,
5,2,3,4,0,7,1,6,
2,3,0,7,6,4,1,5,
1,3,0,4,5,2,7,6,
3,4,2,5,6,0,1,7,
4,2,0,6,3,7,5,1,

4,1,6,0,7,3,2,5,
7,6,0,5,1,4,2,3,
6,1,3,2,7,0,5,4,
2,7,3,6,0,5,1,4,
6,5,2,1,0,3,7,4,
7,1,0,5,4,6,3,2,
1,7,3,2,6,0,5,4,
0,2,6,7,4,3,5,1,

0,5,4,1,6,3,2,7,
0,1,5,4,7,2,3,6,
1,4,2,3,5,7,6,0,
2,7,0,5,6,1,3,4,
2,1,6,0,4,5,3,7,
6,1,5,4,2,7,3,0,
4,0,5,2,1,6,7,3,
1,2,0,6,3,7,4,5,

5,0,1,2,4,3,7,6,
4,2,0,6,7,5,1,3,
2,3,7,4,6,1,0,5,
1,5,7,0,3,4,2,6,
2,7,6,3,5,1,0,4,
4,5,7,0,2,3,1,6,
0,5,7,3,2,1,6,4,
6,4,5,7,1,0,3,2,

1,6,5,7,0,2,3,4,
2,1,5,3,6,4,0,7,
0,6,5,4,3,7,0,2,
6,4,2,0,3,1,5,7,
4,5,7,6,0,3,1,2,
0,3,7,2,1,5,6,4,
5,2,4,0,1,3,7,2,
4,5,3,1,7,0,2,6
};
uchar code tab_shandian[]={
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,

	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//1

	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,

	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//2

	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,

	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//3

	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,

	0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x0f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//4

	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,

	0x01,0x01,0x00,0x00,0x00,0x00,0x00,0x00,
	0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x1f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//5

	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,

	0x01,0x01,0x01,0x00,0x00,0x00,0x00,0x00,
	0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//6

	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,

	0x01,0x01,0x01,0x00,0x00,0x00,0x00,0x00,
	0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x7f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//7

	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,

	0x01,0x01,0x01,0x00,0x00,0x00,0x00,0x00,
	0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//8


	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x01,0x01,0x00,0x00,0x00,0x00,
	0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,

	0x01,0x01,0x01,0x00,0x00,0x00,0x00,0x00,
	0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0xff,0x80,0x00,0x00,0x00,0x00,0x00,0x00,//9

	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x01,0x01,0x01,0x00,0x00,0x00,
	0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,

	0x01,0x01,0x01,0x00,0x00,0x00,0x00,0x00,
	0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0xff,0x80,0x80,0x00,0x00,0x00,0x00,0x00,//10

	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x01,0x01,0x01,0x01,0x00,0x00,
	0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,

	0x01,0x01,0x01,0x00,0x00,0x00,0x00,0x00,
	0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0xff,0x80,0x80,0x80,0x00,0x00,0x00,0x00,//11

	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,
	0x00,0x00,0x01,0x01,0x01,0x01,0x00,0x00,
	0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,

	0x01,0x01,0x01,0x00,0x00,0x00,0x00,0x00,
	0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x01,0x00,0x00,0x80,0x00,0x00,0x00,0x00,
	0xff,0x80,0x80,0x80,0x00,0x00,0x00,0x00,//12


	0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,
	0x00,0x00,0x01,0x01,0x01,0x01,0x00,0x00,
	0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,

	0x01,0x01,0x01,0x00,0x00,0x00,0x00,0x00,
	0x01,0x00,0x00,0x80,0x00,0x00,0x00,0x00,
	0x01,0x00,0x00,0x80,0x00,0x00,0x00,0x00,
	0xff,0x80,0x80,0x80,0x00,0x00,0x00,0x00,//13

	0x00,0x00,0x00,0x00,0x00,0x01,0x01,0x00,
	0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,
	0x00,0x00,0x01,0x01,0x01,0x01,0x00,0x00,
	0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,

	0x01,0x01,0x01,0x00,0x00,0x00,0x00,0x00,
	0x01,0x00,0x00,0x80,0x80,0x00,0x00,0x00,
	0x01,0x00,0x00,0x80,0x00,0x00,0x00,0x00,
	0xff,0x80,0x80,0x80,0x00,0x00,0x00,0x00,//14

	0x00,0x00,0x00,0x00,0x00,0x01,0x01,0x01,
	0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,
	0x00,0x00,0x01,0x01,0x01,0x01,0x00,0x00,
	0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,

	0x01,0x01,0x01,0x00,0x00,0x00,0x00,0x00,
	0x01,0x00,0x00,0x80,0x80,0x80,0x00,0x00,
	0x01,0x00,0x00,0x80,0x00,0x00,0x00,0x00,
	0xff,0x80,0x80,0x80,0x00,0x00,0x00,0x00,//15

	0x00,0x00,0x00,0x00,0x00,0x01,0x01,0x03,
	0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,
	0x00,0x00,0x01,0x01,0x01,0x01,0x00,0x00,
	0x00,0x00,0x01,0x00,0x00,0x00,0x00,0x00,

	0x01,0x01,0x01,0x00,0x00,0x80,0x00,0x00,
	0x01,0x00,0x00,0x80,0x80,0x80,0x00,0x00,
	0x01,0x00,0x00,0x80,0x00,0x00,0x00,0x00,
	0xff,0x80,0x80,0x80,0x00,0x00,0x00,0x00,//16

	0x00,0x00,0x00,0x00,0x00,0x01,0x01,0x07,
	0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,
	0x00,0x00,0x01,0x01,0x01,0x01,0x00,0x00,
	0x00,0x00,0x01,0x00,0x00,0x80,0x00,0x00,

	0x01,0x01,0x01,0x00,0x00,0x80,0x00,0x00,
	0x01,0x00,0x00,0x80,0x80,0x80,0x00,0x00,
	0x01,0x00,0x00,0x80,0x00,0x00,0x00,0x00,
	0xff,0x80,0x80,0x80,0x00,0x00,0x00,0x00,//17

	0x00,0x00,0x00,0x00,0x00,0x01,0x01,0x0f,
	0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,
	0x00,0x00,0x01,0x01,0x01,0x01,0x00,0x00,
	0x00,0x00,0x01,0x00,0x00,0x80,0x80,0x00,

	0x01,0x01,0x01,0x00,0x00,0x80,0x00,0x00,
	0x01,0x00,0x00,0x80,0x80,0x80,0x00,0x00,
	0x01,0x00,0x00,0x80,0x00,0x00,0x00,0x00,
	0xff,0x80,0x80,0x80,0x00,0x00,0x00,0x00,//18

	0x00,0x00,0x00,0x00,0x00,0x01,0x01,0x1f,
	0x00,0x00,0x00,0x00,0x00,0x01,0x00,0x00,
	0x00,0x00,0x01,0x01,0x01,0x01,0x80,0x00,
	0x00,0x00,0x01,0x00,0x00,0x80,0x80,0x00,

	0x01,0x01,0x01,0x00,0x00,0x80,0x00,0x00,
	0x01,0x00,0x00,0x80,0x80,0x80,0x00,0x00,
	0x01,0x00,0x00,0x80,0x00,0x00,0x00,0x00,
	0xff,0x80,0x80,0x80,0x00,0x00,0x00,0x00,//19

	0x00,0x00,0x00,0x00,0x00,0x01,0x01,0x3f,
	0x00,0x00,0x00,0x00,0x00,0x01,0x80,0x00,
	0x00,0x00,0x01,0x01,0x01,0x01,0x80,0x00,
	0x00,0x00,0x01,0x00,0x00,0x80,0x80,0x00,

	0x01,0x01,0x01,0x00,0x00,0x80,0x00,0x00,
	0x01,0x00,0x00,0x80,0x80,0x80,0x00,0x00,
	0x01,0x00,0x00,0x80,0x00,0x00,0x00,0x00,
	0xff,0x80,0x80,0x80,0x00,0x00,0x00,0x00,//20


	0x00,0x00,0x00,0x00,0x00,0x01,0x81,0x7f,
	0x00,0x00,0x00,0x00,0x00,0x01,0x80,0x00,
	0x00,0x00,0x01,0x01,0x01,0x01,0x80,0x00,
	0x00,0x00,0x01,0x00,0x00,0x80,0x80,0x00,

	0x01,0x01,0x01,0x00,0x00,0x80,0x00,0x00,
	0x01,0x00,0x00,0x80,0x80,0x80,0x00,0x00,
	0x01,0x00,0x00,0x80,0x00,0x00,0x00,0x00,
	0xff,0x80,0x80,0x80,0x00,0x00,0x00,0x00,//21

	0x00,0x00,0x00,0x00,0x00,0x01,0x81,0xff,
	0x00,0x00,0x00,0x00,0x00,0x01,0x80,0x00,
	0x00,0x00,0x01,0x01,0x01,0x01,0x80,0x00,
	0x00,0x00,0x01,0x00,0x00,0x80,0x80,0x00,

	0x01,0x01,0x01,0x00,0x00,0x80,0x00,0x00,
	0x01,0x00,0x00,0x80,0x80,0x80,0x00,0x00,
	0x01,0x00,0x00,0x80,0x00,0x00,0x00,0x00,
	0xff,0x80,0x80,0x80,0x00,0x00,0x00,0x00,//22
};
uchar code yc_table[]={//2帧,yinchu函数使用
	0x00,0x00,0x00,0x3c,0x3c,0x00,0x00,0x00,//1I
	0x00,0x00,0x00,0x3c,0x3c,0x00,0x00,0x00,
	0x00,0x00,0x00,0x18,0x18,0x00,0x00,0x00,
	0x00,0x00,0x00,0x18,0x18,0x00,0x00,0x00,
	0x00,0x00,0x00,0x18,0x18,0x00,0x00,0x00,
	0x00,0x00,0x00,0x18,0x18,0x00,0x00,0x00,
	0x00,0x00,0x00,0x3c,0x3c,0x00,0x00,0x00,
	0x00,0x00,0x00,0x3c,0x3c,0x00,0x00,0x00,

	0x00,0x00,0x00,0x18,0x18,0x00,0x00,0x00,//2心脏
	0x00,0x00,0x00,0x3c,0x3c,0x00,0x00,0x00,
	0x00,0x00,0x18,0x7e,0x7e,0x18,0x00,0x00,
	0x00,0x00,0x3c,0x7e,0x7e,0x3c,0x00,0x00,
	0x00,0x18,0x7e,0xff,0xff,0x7e,0x18,0x00,
	0x00,0x00,0x7e,0xff,0xff,0x7e,0x00,0x00,
	0x00,0x00,0x00,0x66,0x66,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,

	0x00,0x00,0x00,0x18,0x18,0x00,0x00,0x00,//3U
	0x00,0x00,0x00,0x3c,0x3c,0x00,0x00,0x00,
	0x00,0x00,0x00,0x66,0x66,0x00,0x00,0x00,
	0x00,0x00,0x00,0x66,0x66,0x00,0x00,0x00,
	0x00,0x00,0x00,0x66,0x66,0x00,0x00,0x00,
	0x00,0x00,0x00,0x66,0x66,0x00,0x00,0x00,
	0x00,0x00,0x00,0x66,0x66,0x00,0x00,0x00,
	0x00,0x00,0x00,0x66,0x66,0x00,0x00,0x00,

	0x00,0x00,0x00,0x24,0x24,0x00,0x00,0x00,//4苹果
	0x00,0x00,0x00,0x7e,0x7e,0x00,0x00,0x00,
	0x00,0x00,0x3c,0xff,0x7e,0x3c,0x00,0x00,
	0x00,0x18,0x7e,0xff,0xff,0x7e,0x18,0x00,
	0x00,0x00,0x3c,0xfe,0xfe,0x3c,0x00,0x00,
	0x00,0x00,0x00,0x6e,0x66,0x00,0x00,0x00,
	0x00,0x00,0x00,0x18,0x10,0x00,0x00,0x00,
	0x00,0x00,0x00,0x0c,0x00,0x00,0x00,0x00,

	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//5五角星
	0x00,0x00,0x00,0x22,0x22,0x00,0x00,0x00,
	0x00,0x00,0x00,0x36,0x36,0x00,0x00,0x00,
	0x00,0x00,0x00,0x1c,0x1c,0x00,0x00,0x00,
	0x00,0x00,0x00,0x3e,0x3e,0x00,0x00,0x00,
	0x00,0x00,0x00,0x7f,0x7f,0x00,0x00,0x00,
	0x00,0x00,0x00,0x1c,0x1c,0x00,0x00,0x00,
	0x00,0x00,0x00,0x08,0x08,0x00,0x00,0x00
};
uchar code tab_xuanzhuantiao[]=//旋转条
{
	0x01,0x02,0x04,0x08,0x10,0x20,0x40,0x80,
	0x00,0x01,0x06,0x08,0x10,0x60,0x80,0x00,
	0x00,0x00,0x01,0x0e,0x70,0x80,0x00,0x00,
	0x00,0x00,0x00,0x0f,0xf0,0x00,0x00,0x00,
	0x00,0x00,0x00,0xf0,0x0f,0x00,0x00,0x00,
	0x00,0x00,0x80,0x70,0x0e,0x01,0x00,0x00,
	0x00,0x80,0x60,0x10,0x08,0x06,0x01,0x00,//
	0x80,0x40,0x20,0x10,0x08,0x04,0x02,0x01,//1
	0x40,0x20,0x20,0x10,0x08,0x04,0x04,0x02,
	0x20,0x10,0x10,0x10,0x08,0x08,0x08,0x04,
	0x10,0x10,0x10,0x10,0x08,0x08,0x08,0x08,
	0x08,0x08,0x08,0x08,0x10,0x10,0x10,0x10,
	0x04,0x08,0x08,0x08,0x10,0x10,0x10,0x20,
	0x02,0x04,0x04,0x08,0x10,0x20,0x20,0x40//7
};
uchar code flash0__tab[]=
{
0X03,0X07,0X06,0X08,0X10,0X20,0X40,0X80,
0X07,0X07,0X0F,0X1C,0X18,0X20,0X40,0X80,
0X0F,0X0F,0X1F,0X3F,0X3C,0X78,0X60,0X80,
0X1F,0X1F,0X3F,0X3F,0X7F,0X7C,0X70,0X80,
0X3F,0X3F,0X3F,0X7F,0X7F,0X7F,0XF8,0XC0,
0X7F,0X7F,0X7F,0X7F,0XFF,0XFF,0XFF,0XF0,
0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF,0XFF//7
};
uchar code tab_xuanzhuantiao2[]=//旋转条
{
0X01,0X02,0X04,0X08,0X10,0X20,0X40,0X80,//1
0X02,0X04,0X08,0X00,0X10,0X20,0X40,0X80,//
0X04,0X08,0X00,0X10,0X20,0X20,0X40,0X80,//
0X08,0X10,0X10,0X20,0X20,0X40,0X40,0X80,//
0X10,0X10,0X20,0X20,0X20,0X40,0X40,0X80,//
0X20,0X20,0X40,0X40,0X40,0X80,0X80,0X80,//
0X40,0X40,0X40,0X40,0X80,0X80,0X80,0X80,//

0X80,0X80,0X80,0X80,0X80,0X80,0X80,0X80,//8
0X80,0X80,0X80,0X80,0X40,0X40,0X40,0X40,//
0X80,0X80,0X00,0X40,0X40,0X40,0X20,0X20,//10
0X80,0X80,0X40,0X40,0X20,0X20,0X10,0X10,//
0X80,0X40,0X40,0X20,0X20,0X10,0X10,0X08,//
0X80,0X40,0X20,0X20,0X10,0X10,0X08,0X04,//
0X80,0X40,0X20,0X10,0X08,0X08,0X04,0X02,//
0X80,0X40,0X20,0X10,0X08,0X04,0X02,0X01,//15
0X80,0X40,0X20,0X10,0X0C,0X02,0X01,0X00,//16
0X80,0X40,0X30,0X0C,0X02,0X01,0X00,0X00,//
0X80,0X60,0X18,0X06,0X01,0X00,0X00,0X00,//18
0XC0,0X30,0X0E,0X01,0X00,0X00,0X00,0X00,//
0XE0,0X1C,0X03,0X00,0X00,0X00,0X00,0X00,//20
0XF0,0X0F,0X00,0X00,0X00,0X00,0X00,0X00,//
0XFF,0X00,0X00,0X00,0X00,0X00,0X00,0X00,//22

0X0F,0XF0,0X00,0X00,0X00,0X00,0X00,0X00,//23
0X07,0X38,0XC0,0X00,0X00,0X00,0X00,0X00,
0X03,0X0C,0X20,0XC0,0X00,0X00,0X00,0X00,
0X01,0X02,0X0C,0X30,0XC0,0X00,0X00,0X00,
0X01,0X02,0X04,0X08,0X30,0XC0,0X00,0X00,
0X01,0X02,0X04,0X08,0X10,0X60,0X80,0X00,
0X01,0X02,0X04,0X08,0X10,0X20,0X40,0X80,
0X01,0X02,0X04,0X08,0X10,0X20,0X20,0X40,
0X01,0X02,0X04,0X08,0X08,0X10,0X20,0X20,
0X01,0X02,0X04,0X04,0X08,0X08,0X10,0X10,
0X01,0X01,0X02,0X02,0X04,0X04,0X08,0X08,
0X01,0X01,0X01,0X02,0X02,0X02,0X04,0X04,
0X01,0X01,0X01,0X01,0X02,0X02,0X02,0X02,
0X01,0X01,0X01,0X01,0X01,0X01,0X01,0X01,//36


0X02,0X02,0X02,0X02,0X01,0X01,0X01,0X01,//37
0X04,0X04,0X02,0X02,0X02,0X01,0X01,0X01,
0X08,0X08,0X04,0X04,0X02,0X02,0X01,0X01,
0X10,0X10,0X08,0X08,0X04,0X04,0X02,0X01,
0X20,0X10,0X00,0X08,0X08,0X04,0X02,0X01,
0X40,0X20,0X10,0X08,0X08,0X04,0X02,0X01,
0X80,0X40,0X20,0X10,0X08,0X04,0X02,0X01,
0X00,0X80,0X40,0X20,0X18,0X04,0X02,0X01,
0X00,0X00,0X80,0X40,0X38,0X04,0X02,0X01,
0X00,0X00,0X00,0X80,0X60,0X1C,0X02,0X01,
0X00,0X00,0X00,0X00,0X80,0X70,0X0E,0X01,
0X00,0X00,0X00,0X00,0X00,0XC0,0X3C,0X03,
0X00,0X00,0X00,0X00,0X00,0X00,0XF0,0X0F,
0X00,0X00,0X00,0X00,0X00,0X00,0X00,0XFF,//50

0X00,0X00,0X00,0X00,0X00,0X00,0X0F,0XF0,//51
0X00,0X00,0X00,0X00,0X00,0X03,0X1C,0XE0,
0X00,0X00,0X00,0X00,0X03,0X0C,0X30,0XC0,
0X00,0X00,0X00,0X01,0X06,0X18,0X20,0XC0,
0X00,0X00,0X01,0X02,0X0C,0X30,0X40,0X80,
0X00,0X01,0X02,0X04,0X18,0X20,0X40,0X80,
//0X01,0X02,0X04,0X08,0X10,0X20,0X40,0X80//57
};
uchar code bianxing_table[]={//变形
	0x01,0x02,0x04,0x08,0x10,0x20,0x40,0x80,
	0x01,0x02,0x04,0x08,0x10,0x20,0x40,0x80,
	0x01,0x02,0x04,0x08,0x10,0x20,0x40,0x80,
	0x01,0x02,0x04,0x08,0x10,0x20,0x40,0x80,
	0x01,0x02,0x04,0x08,0x10,0x20,0x40,0x80,
	0x01,0x02,0x04,0x08,0x10,0x20,0x40,0x80,
	0x01,0x02,0x04,0x08,0x10,0x20,0x40,0x80,
	0x01,0x02,0x04,0x08,0x10,0x20,0x40,0x80,//1	

	0x00,0x01,0x06,0x08,0x10,0x60,0x80,0x00,
	0x00,0x01,0x06,0x08,0x10,0x60,0x80,0x00,
	0x00,0x01,0x06,0x08,0x10,0x60,0x80,0x00,
	0x00,0x01,0x06,0x08,0x10,0x60,0x80,0x00,
	0x00,0x01,0x06,0x08,0x10,0x60,0x80,0x00,
	0x00,0x01,0x06,0x08,0x10,0x60,0x80,0x00,
	0x00,0x01,0x06,0x08,0x10,0x60,0x80,0x00,
	0x00,0x01,0x06,0x08,0x10,0x60,0x80,0x00,//2

	0x00,0x00,0x01,0x0e,0x70,0x80,0x00,0x00,
	0x00,0x00,0x01,0x0e,0x70,0x80,0x00,0x00,
	0x00,0x00,0x01,0x0e,0x70,0x80,0x00,0x00,
	0x00,0x00,0x01,0x0e,0x70,0x80,0x00,0x00,
	0x00,0x00,0x01,0x0e,0x70,0x80,0x00,0x00,
	0x00,0x00,0x01,0x0e,0x70,0x80,0x00,0x00,
	0x00,0x00,0x01,0x0e,0x70,0x80,0x00,0x00,
	0x00,0x00,0x01,0x0e,0x70,0x80,0x00,0x00,//3

	0X00,0X00,0X00,0X0F,0XF0,0X00,0X00,0X00,
	0X00,0X00,0X00,0X0F,0XF0,0X00,0X00,0X00,
	0X00,0X00,0X00,0X0F,0XF0,0X00,0X00,0X00,
	0X00,0X00,0X00,0X0F,0XF0,0X00,0X00,0X00,
	0X00,0X00,0X00,0X0F,0XF0,0X00,0X00,0X00,
	0X00,0X00,0X00,0X0F,0XF0,0X00,0X00,0X00,
	0X00,0X00,0X00,0X0F,0XF0,0X00,0X00,0X00,
	0X00,0X00,0X00,0X0F,0XF0,0X00,0X00,0X00,//4变形开始

	0X00,0X00,0X00,0X0F,0X00,0XF0,0X00,0X00,
	0X00,0X00,0X00,0X0F,0X00,0XF0,0X00,0X00,
	0X00,0X00,0X00,0X0F,0X00,0XF0,0X00,0X00,
	0X00,0X00,0X00,0X0F,0X00,0XF0,0X00,0X00,
	0X00,0X00,0X0F,0X00,0XF0,0X00,0X00,0X00,
	0X00,0X00,0X0F,0X00,0XF0,0X00,0X00,0X00,
	0X00,0X00,0X0F,0X00,0XF0,0X00,0X00,0X00,
	0X00,0X00,0X0F,0X00,0XF0,0X00,0X00,0X00,//5

	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0X00,0X00,0X00,0X0F,0X00,0XF0,0X00,0X00,
	0X00,0X00,0X00,0X0F,0X00,0XF0,0X00,0X00,
	0X00,0X00,0X0f,0X0F,0Xf0,0XF0,0X00,0X00,
	0X00,0X00,0X0f,0X0F,0Xf0,0XF0,0X00,0X00,
	0X00,0X00,0X0F,0X00,0XF0,0X00,0X00,0X00,
	0X00,0X00,0X0F,0X00,0XF0,0X00,0X00,0X00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//6

	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0X00,0X00,0X0f,0X0F,0Xf0,0XF0,0X00,0X00,
	0X00,0X00,0X0f,0X0F,0Xf0,0XF0,0X00,0X00,
	0X00,0X00,0X0f,0X0F,0Xf0,0XF0,0X00,0X00,
	0X00,0X00,0X0F,0X0f,0XF0,0Xf0,0X00,0X00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//7
	
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x1e,0x1e,0x78,0x78,0x00,0x00,
	0x00,0x00,0x1e,0x1e,0x78,0x78,0x00,0x00,
	0x00,0x00,0x1e,0x1e,0x78,0x78,0x00,0x00,
	0x00,0x00,0x1e,0x1e,0x78,0x78,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//8

	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x3c,0x3c,0x3c,0x3c,0x00,0x00,
	0x00,0x00,0x3c,0x3c,0x3c,0x3c,0x00,0x00,
	0x00,0x00,0x3c,0x3c,0x3c,0x3c,0x00,0x00,
	0x00,0x00,0x3c,0x3c,0x3c,0x3c,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//9,方体成型

	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x66,0x66,0x00,0x00,0x66,0x66,0x00,
	0x00,0x66,0x66,0x00,0x00,0x66,0x66,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x66,0x66,0x00,0x00,0x66,0x66,0x00,
	0x00,0x66,0x66,0x00,0x00,0x66,0x66,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//10
	
	0xc3,0xc3,0x00,0x00,0x00,0x00,0xc3,0xc3,
	0xc3,0xc3,0x00,0x00,0x00,0x00,0xc3,0xc3,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0xc3,0xc3,0x00,0x00,0x00,0x00,0xc3,0xc3,
	0xc3,0xc3,0x00,0x00,0x00,0x00,0xc3,0xc3,//11
};
uchar code y_table[]={//6帧四方块外轴心旋转
	0xc3,0xc3,0x00,0x00,0x00,0x00,0xc3,0xc3,
	0xc3,0xc3,0x00,0x00,0x00,0x00,0xc3,0xc3,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0xc3,0xc3,0x00,0x00,0x00,0x00,0xc3,0xc3,
	0xc3,0xc3,0x00,0x00,0x00,0x00,0xc3,0xc3,//1

	0x06,0x06,0x00,0x00,0x00,0x00,0x06,0x06,
	0xc6,0xc6,0x00,0x00,0x00,0x00,0xc6,0xc6,
	0xc0,0xc0,0x00,0x00,0x00,0x00,0xc0,0xc0,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x03,0x03,0x00,0x00,0x00,0x00,0x03,0x03,
	0x63,0x63,0x00,0x00,0x00,0x00,0x63,0x63,
	0x60,0x60,0x00,0x00,0x00,0x00,0x60,0x60,//2

	0x0c,0x0c,0x00,0x00,0x00,0x00,0x0c,0x0c,
	0x0c,0x0c,0x00,0x00,0x00,0x00,0x0c,0x0c,
	0xc0,0xc0,0x00,0x00,0x00,0x00,0xc0,0xc0,
	0xc0,0xc0,0x00,0x00,0x00,0x00,0xc0,0xc0,
	0x0c,0x0c,0x00,0x00,0x00,0x00,0x03,0x03,
	0x0c,0x0c,0x00,0x00,0x00,0x00,0x03,0x03,
	0x30,0x30,0x00,0x00,0x00,0x00,0x30,0x30,
	0x30,0x30,0x00,0x00,0x00,0x00,0x30,0x30,//3

	0x18,0x18,0x00,0x00,0x00,0x00,0x18,0x18,
	0x18,0x18,0x00,0x00,0x00,0x00,0x18,0x18,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0xc3,0xc3,0x00,0x00,0x00,0x00,0xc3,0xc3,
	0xc3,0xc3,0x00,0x00,0x00,0x00,0xc3,0xc3,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x18,0x18,0x00,0x00,0x00,0x00,0x18,0x18,
	0x18,0x18,0x00,0x00,0x00,0x00,0x18,0x18,//4

	0x30,0x30,0x00,0x00,0x00,0x00,0x30,0x30,
	0x30,0x30,0x00,0x00,0x00,0x00,0x30,0x30,
	0x03,0x03,0x00,0x00,0x00,0x00,0x03,0x03,
	0x03,0x03,0x00,0x00,0x00,0x00,0x03,0x03,
	0xc0,0xc0,0x00,0x00,0x00,0x00,0xc0,0xc0,
	0xc0,0xc0,0x00,0x00,0x00,0x00,0xc0,0xc0,
	0x0c,0x0c,0x00,0x00,0x00,0x00,0x0c,0x0c,
	0x0c,0x0c,0x00,0x00,0x00,0x00,0x0c,0x0c,//5

	0x60,0x60,0x00,0x00,0x00,0x00,0x60,0x60,
	0x63,0x63,0x00,0x00,0x00,0x00,0x63,0x63,
	0x03,0x03,0x00,0x00,0x00,0x00,0x03,0x03,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0xc0,0xc0,0x00,0x00,0x00,0x00,0xc0,0xc0,
	0xc6,0xc6,0x00,0x00,0x00,0x00,0xc6,0xc6,
	0x06,0x06,0x00,0x00,0x00,0x00,0x06,0x06//6
};
uchar code z_table[]=
{
0xc3,0xc3,0x00,0x00,0x00,0x00,0xc3,0xc3,
0xc3,0xc3,0x00,0x00,0x00,0x00,0xc3,0xc3,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0xc3,0xc3,0x00,0x00,0x00,0x00,0xc3,0xc3,
0xc3,0xc3,0x00,0x00,0x00,0x00,0xc3,0xc3,//1

0x60,0x63,0x03,0x00,0x00,0xc0,0xc6,0x06,
0x60,0x63,0x03,0x00,0x00,0xc0,0xc6,0x06,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x60,0x63,0x03,0x00,0x00,0xc0,0xc6,0x06,
0x60,0x63,0x03,0x00,0x00,0xc0,0xc6,0x06,//2

0x30,0x30,0x03,0x03,0xc0,0xc0,0x0c,0x0c,
0x30,0x30,0x03,0x03,0xc0,0xc0,0x0c,0x0c,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x30,0x30,0x03,0x03,0xc0,0xc0,0x0c,0x0c,
0x30,0x30,0x03,0x03,0xc0,0xc0,0x0c,0x0c,//3

0x18,0x18,0x00,0xc3,0xc3,0x00,0x18,0x18,
0x18,0x18,0x00,0xc3,0xc3,0x00,0x18,0x18,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x18,0x18,0x00,0xc3,0xc3,0x00,0x18,0x18,
0x18,0x18,0x00,0xc3,0xc3,0x00,0x18,0x18,//4

0x0c,0x0c,0xc0,0xc0,0x03,0x03,0x30,0x30,
0x0c,0x0c,0xc0,0xc0,0x03,0x03,0x30,0x30,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x0c,0x0c,0xc0,0xc0,0x03,0x03,0x30,0x30,
0x0c,0x0c,0xc0,0xc0,0x03,0x03,0x30,0x30,//5

0x06,0xc6,0xc0,0x00,0x00,0x03,0x63,0x60,
0x06,0xc6,0xc0,0x00,0x00,0x03,0x63,0x60,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x06,0xc6,0xc0,0x00,0x00,0x03,0x63,0x60,
0x06,0xc6,0xc0,0x00,0x00,0x03,0x63,0x60,//6
};
uchar code xz_table[]=
{
0x00,0x00,0x00,0x00,0x00,0x00,0xc3,0xc3,
0xc3,0xc3,0x00,0x00,0x00,0x00,0xc3,0xc3,
0xc3,0xc3,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0xc3,0xc3,
0x00,0xc3,0xc3,0x00,0x00,0x00,0xc3,0xc3,
0x00,0xc3,0xc3,0x00,0x00,0x00,0x00,0x00,//1

0x00,0x00,0x00,0x00,0x00,0x00,0xc3,0xc3,
0x00,0x00,0x00,0x00,0x00,0x00,0xc3,0xc3,
0xc3,0xc3,0x00,0x00,0x00,0x00,0x00,0x00,
0xc3,0xc3,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0xc3,0xc3,
0x00,0x00,0x00,0x00,0x00,0x00,0xc3,0xc3,
0x00,0x00,0xc3,0xc3,0x00,0x00,0x00,0x00,
0x00,0x00,0xc3,0xc3,0x00,0x00,0x00,0x00,//2

0x00,0x00,0x00,0x00,0x00,0x00,0xc3,0xc3,
0x00,0x00,0x00,0x00,0x00,0x00,0xc3,0xc3,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0xc3,0xc3,0x00,0x00,0x00,0x00,0xc3,0xc3,
0xc3,0xc3,0x00,0x00,0x00,0x00,0xc3,0xc3,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0xc3,0xc3,0x00,0x00,0x00,
0x00,0x00,0x00,0xc3,0xc3,0x00,0x00,0x00,//3

0x00,0x00,0x00,0x00,0x00,0x00,0xc3,0xc3,
0x00,0x00,0x00,0x00,0x00,0x00,0xc3,0xc3,
0x00,0x00,0x00,0x00,0x00,0x00,0xc3,0xc3,
0x00,0x00,0x00,0x00,0x00,0x00,0xc3,0xc3,
0xc3,0xc3,0x00,0x00,0x00,0x00,0x00,0x00,
0xc3,0xc3,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0xc3,0xc3,0x00,0x00,
0x00,0x00,0x00,0x00,0xc3,0xc3,0x00,0x00,//4

0x00,0x00,0x00,0x00,0x00,0x00,0xc3,0xc3,
0x00,0x00,0x00,0x00,0x00,0x00,0xc3,0xc3,
0x00,0x00,0x00,0x00,0x00,0x00,0xc3,0xc3,
0x00,0x00,0x00,0x00,0x00,0x00,0xc3,0xc3,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0xc3,0xc3,0x00,0x00,0x00,0x00,0x00,0x00,
0xc3,0xc3,0x00,0x00,0x00,0xc3,0xc3,0x00,
0x00,0x00,0x00,0x00,0x00,0xc3,0xc3,0x00,//5

0x00,0x00,0x00,0x00,0x00,0x00,0xc3,0xc3,
0x00,0x00,0x00,0x00,0x00,0x00,0xc3,0xc3,
0x00,0x00,0x00,0x00,0x00,0x00,0xc3,0xc3,
0x00,0x00,0x00,0x00,0x00,0x00,0xc3,0xc3,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0xc3,0xc3,0x00,0x00,0x00,0x00,0xc3,0xc3,
0xc3,0xc3,0x00,0x00,0x00,0x00,0xc3,0xc3,//6

0x00,0x00,0x00,0x00,0x00,0x00,0xc3,0xc3,
0x00,0x00,0x00,0x00,0x00,0x00,0xc3,0xc3,
0x00,0x00,0x00,0x00,0x00,0x00,0xc3,0xc3,
0x00,0x00,0x00,0x00,0x00,0x00,0xc3,0xc3,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0xc3,0xc3,
0x00,0xc3,0xc3,0x00,0x00,0x00,0xc3,0xc3,
0x00,0xc3,0xc3,0x00,0x00,0x00,0x00,0x00,//7

0x00,0x00,0x00,0x00,0x00,0x00,0xc3,0xc3,
0x00,0x00,0x00,0x00,0x00,0x00,0xc3,0xc3,
0x00,0x00,0x00,0x00,0x00,0x00,0xc3,0xc3,
0x00,0x00,0x00,0x00,0x00,0x00,0xc3,0xc3,
0x00,0x00,0x00,0x00,0x00,0x00,0xc3,0xc3,
0x00,0x00,0x00,0x00,0x00,0x00,0xc3,0xc3,
0x00,0x00,0xc3,0xc3,0x00,0x00,0x00,0x00,
0x00,0x00,0xc3,0xc3,0x00,0x00,0x00,0x00,//8



0x00,0x00,0x00,0x00,0x00,0x00,0xc3,0xc3,
0x00,0x00,0x00,0x00,0x00,0x00,0xc3,0xc3,
0x00,0x00,0x00,0x00,0x00,0x00,0xc3,0xc3,
0x00,0x00,0x00,0x00,0x00,0x00,0xc3,0xc3,
0x00,0x00,0x00,0x00,0x00,0x00,0xc3,0xc3,
0x00,0x00,0x00,0x00,0x00,0x00,0xc3,0xc3,
0x00,0x00,0x00,0xc3,0xc3,0x00,0x00,0x00,
0x00,0x00,0x00,0xc3,0xc3,0x00,0x00,0x00,//9

0x00,0x00,0x00,0x00,0x00,0x00,0xc3,0xc3,
0x00,0x00,0x00,0x00,0x00,0x00,0xc3,0xc3,
0x00,0x00,0x00,0x00,0x00,0x00,0xc3,0xc3,
0x00,0x00,0x00,0x00,0x00,0x00,0xc3,0xc3,
0x00,0x00,0x00,0x00,0x00,0x00,0xc3,0xc3,
0x00,0x00,0x00,0x00,0x00,0x00,0xc3,0xc3,
0x00,0x00,0x00,0x00,0xc3,0xc3,0x00,0x00,
0x00,0x00,0x00,0x00,0xc3,0xc3,0x00,0x00,//10

0x00,0x00,0x00,0x00,0x00,0x00,0xc3,0xc3,
0x00,0x00,0x00,0x00,0x00,0x00,0xc3,0xc3,
0x00,0x00,0x00,0x00,0x00,0x00,0xc3,0xc3,
0x00,0x00,0x00,0x00,0x00,0x00,0xc3,0xc3,
0x00,0x00,0x00,0x00,0x00,0x00,0xc3,0xc3,
0x00,0x00,0x00,0x00,0x00,0x00,0xc3,0xc3,
0x00,0x00,0x00,0x00,0x00,0xc3,0xc3,0x00,
0x00,0x00,0x00,0x00,0x00,0xc3,0xc3,0x00,//11

0x00,0x00,0x00,0x00,0x00,0x00,0xc3,0xc3,
0x00,0x00,0x00,0x00,0x00,0x00,0xc3,0xc3,
0x00,0x00,0x00,0x00,0x00,0x00,0xc3,0xc3,
0x00,0x00,0x00,0x00,0x00,0x00,0xc3,0xc3,
0x00,0x00,0x00,0x00,0x00,0x00,0xc3,0xc3,
0x00,0x00,0x00,0x00,0x00,0x00,0xc3,0xc3,
0x00,0x00,0x00,0x00,0x00,0x00,0xc3,0xc3,
0x00,0x00,0x00,0x00,0x00,0x00,0xc3,0xc3,//12

0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,
0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,
0x00,0x00,0x00,0x00,0x00,0x00,0xc3,0xc3,
0x00,0x00,0x00,0x00,0x00,0x00,0xc3,0xc3,
0x00,0x00,0x00,0x00,0x00,0x00,0xc3,0xc3,
0x00,0x00,0x00,0x00,0x00,0x00,0xc3,0xc3,
0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,
0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,//13

0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,
0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,
0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,//14

0x00,0x00,0x00,0x00,0x00,0xc0,0xff,0x3f,
0x00,0x00,0x00,0x00,0x00,0xc0,0xff,0x3f,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0xc0,0xff,0x3f,
0x00,0x00,0x00,0x00,0x00,0xc0,0xff,0x3f,//15

0x00,0x00,0x00,0x00,0xc0,0xc0,0x3f,0x3f,
0x00,0x00,0x00,0x00,0xc0,0xc0,0x3f,0x3f,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0xc0,0xc0,0x3f,0x3f,
0x00,0x00,0x00,0x00,0xc0,0xc0,0x3f,0x3f,//16

0x00,0x00,0x00,0xc0,0xc0,0x00,0x3f,0x3f,
0x00,0x00,0x00,0xc0,0xc0,0x00,0x3f,0x3f,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0xc0,0xc0,0x00,0x3f,0x3f,
0x00,0x00,0x00,0xc0,0xc0,0x00,0x3f,0x3f,//17

0x00,0x00,0xc0,0xc0,0x00,0x00,0x3f,0x3f,
0x00,0x00,0xc0,0xc0,0x00,0x00,0x3f,0x3f,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0xc0,0xc0,0x00,0x00,0x3f,0x3f,
0x00,0x00,0xc0,0xc0,0x00,0x00,0x3f,0x3f,//18

0x00,0xc0,0xc0,0x00,0x00,0x00,0x6f,0x6f,
0x00,0xc0,0xc0,0x00,0x00,0x00,0x6f,0x6f,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0xc0,0xc0,0x00,0x00,0x00,0x6f,0x6f,
0x00,0xc0,0xc0,0x00,0x00,0x00,0x6f,0x6f,//19

0xc0,0xc0,0x00,0x00,0x00,0x00,0xcf,0xcf,
0xc0,0xc0,0x00,0x00,0x00,0x00,0xcf,0xcf,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0xc0,0xc0,0x00,0x00,0x00,0x00,0xcf,0xcf,
0xc0,0xc0,0x00,0x00,0x00,0x00,0xcf,0xcf,//20

0x60,0x60,0x00,0x00,0x00,0xc0,0xcf,0x0f,
0x60,0x60,0x00,0x00,0x00,0xc0,0xcf,0x0f,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x60,0x60,0x00,0x00,0x00,0xc0,0xcf,0x0f,
0x60,0x60,0x00,0x00,0x00,0xc0,0xcf,0x0f,//21

0x18,0x18,0x00,0x00,0xc0,0xc0,0x0f,0x0f,
0x18,0x18,0x00,0x00,0xc0,0xc0,0x0f,0x0f,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x18,0x18,0x00,0x00,0xc0,0xc0,0x0f,0x0f,
0x18,0x18,0x00,0x00,0xc0,0xc0,0x0f,0x0f,//22

0x18,0x18,0x00,0xc0,0xc0,0x00,0x0f,0x0f,
0x18,0x18,0x00,0xc0,0xc0,0x00,0x0f,0x0f,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x18,0x18,0x00,0xc0,0xc0,0x00,0x0f,0x0f,
0x18,0x18,0x00,0xc0,0xc0,0x00,0x0f,0x0f,//23


0x0c,0x0c,0xc0,0xc0,0x00,0x00,0x1b,0x1b,
0x0c,0x0c,0xc0,0xc0,0x00,0x00,0x1b,0x1b,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x0c,0x0c,0xc0,0xc0,0x00,0x00,0x1b,0x1b,
0x0c,0x0c,0xc0,0xc0,0x00,0x00,0x1b,0x1b,//24

0x06,0xc6,0xc0,0x00,0x00,0x00,0x33,0x33,
0x06,0xc6,0xc0,0x00,0x00,0x00,0x33,0x33,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x06,0xc6,0xc0,0x00,0x00,0x00,0x33,0x33,
0x06,0xc6,0xc0,0x00,0x00,0x00,0x33,0x33,//25

0x03,0xc3,0xc0,0x00,0x00,0x00,0x63,0x63,
0x03,0xc3,0xc0,0x00,0x00,0x00,0x63,0x63,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
0x03,0xc3,0xc0,0x00,0x00,0x00,0x63,0x63,
0x03,0xc3,0xc0,0x00,0x00,0x00,0x63,0x63,//26
};
uchar code yx_table[]={//Y轴心切换至X轴心变形
	0xc3,0xc3,0x00,0x00,0x00,0x00,0xc3,0xc3,
	0xc3,0xc3,0x00,0x00,0x00,0x00,0xc3,0xc3,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0xc3,0xc3,0x00,0x00,0x00,0x00,0xc3,0xc3,
	0xc3,0xc3,0x00,0x00,0x00,0x00,0xc3,0xc3,//1

	0xc6,0xc6,0x00,0x00,0x00,0x00,0xc6,0xc6,
	0xc6,0xc6,0x00,0x00,0x00,0x00,0xc6,0xc6,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x03,0x03,0x00,0x00,0x00,0x00,0x03,0x03,
	0x63,0x63,0x00,0x00,0x00,0x00,0x63,0x63,
	0x60,0x60,0x00,0x00,0x00,0x00,0x60,0x60,//2

	0xcc,0xcc,0x00,0x00,0x00,0x00,0xcc,0xcc,
	0xcc,0xcc,0x00,0x00,0x00,0x00,0xcc,0xcc,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x03,0x03,0x00,0x00,0x00,0x00,0x03,0x03,
	0x03,0x03,0x00,0x00,0x00,0x00,0x03,0x03,
	0x30,0x30,0x00,0x00,0x00,0x00,0x30,0x30,
	0x30,0x30,0x00,0x00,0x00,0x00,0x30,0x30,//3

	0xd8,0xd8,0x00,0x00,0x00,0x00,0xd8,0xd8,
	0xd8,0xd8,0x00,0x00,0x00,0x00,0xd8,0xd8,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x03,0x03,0x00,0x00,0x00,0x00,0x03,0x03,
	0x03,0x03,0x00,0x00,0x00,0x00,0x03,0x03,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x18,0x18,0x00,0x00,0x00,0x00,0x18,0x18,
	0x18,0x18,0x00,0x00,0x00,0x00,0x18,0x18,//4

	0xf0,0xf0,0x00,0x00,0x00,0x00,0xf0,0xf0,
	0xf0,0xf0,0x00,0x00,0x00,0x00,0xf0,0xf0,
	0x03,0x03,0x00,0x00,0x00,0x00,0x03,0x03,
	0x03,0x03,0x00,0x00,0x00,0x00,0x03,0x03,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x0c,0x0c,0x00,0x00,0x00,0x00,0x0c,0x0c,
	0x0c,0x0c,0x00,0x00,0x00,0x00,0x0c,0x0c,//5

	0xf0,0xf0,0x00,0x00,0x00,0x00,0xf0,0xf0,
	0xf3,0xf3,0x00,0x00,0x00,0x00,0xf3,0xf3,
	0x03,0x03,0x00,0x00,0x00,0x00,0x03,0x03,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x06,0x06,0x00,0x00,0x00,0x00,0x06,0x06,
	0x06,0x06,0x00,0x00,0x00,0x00,0x06,0x06,//6

	0xf3,0xf3,0x00,0x00,0x00,0x00,0xf3,0xf3,
	0xf3,0xf3,0x00,0x00,0x00,0x00,0xf3,0xf3,
	0x03,0x03,0x00,0x00,0x00,0x00,0x03,0x03,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x03,0x03,0x00,0x00,0x00,0x00,0x03,0x03,
	0x03,0x03,0x00,0x00,0x00,0x00,0x03,0x03,//7

	0xf6,0xf6,0x00,0x00,0x00,0x00,0xf6,0xf6,
	0xf6,0xf6,0x00,0x00,0x00,0x00,0xf6,0xf6,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x03,0x03,0x00,0x00,0x00,0x00,0x03,0x03,
	0x03,0x03,0x00,0x00,0x00,0x00,0x03,0x03,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//8

	0xfc,0xfc,0x00,0x00,0x00,0x00,0xfc,0xfc,
	0xfc,0xfc,0x00,0x00,0x00,0x00,0xfc,0xfc,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x03,0x03,0x00,0x00,0x00,0x00,0x03,0x03,
	0x03,0x03,0x00,0x00,0x00,0x00,0x03,0x03,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//9

	0xfc,0xfc,0x00,0x00,0x00,0x00,0xfc,0xfc,
	0xfc,0xfc,0x00,0x00,0x00,0x00,0xfc,0xfc,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x03,0x03,0x00,0x00,0x00,0x00,0x03,0x03,
	0x03,0x03,0x00,0x00,0x00,0x00,0x03,0x03,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//10

	0xfc,0xfc,0x00,0x00,0x00,0x00,0xfc,0xfc,
	0xfc,0xfc,0x00,0x00,0x00,0x00,0xfc,0xfc,
	0x03,0x03,0x00,0x00,0x00,0x00,0x03,0x03,
	0x03,0x03,0x00,0x00,0x00,0x00,0x03,0x03,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//11

	0xfc,0xfc,0x00,0x00,0x00,0x00,0xfc,0xfc,
	0xff,0xff,0x00,0x00,0x00,0x00,0xff,0xff,
	0x03,0x03,0x00,0x00,0x00,0x00,0x03,0x03,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//12

	0xff,0xff,0x00,0x00,0x00,0x00,0xff,0xff,
	0xff,0xff,0x00,0x00,0x00,0x00,0xff,0xff,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//13

	0xff,0xff,0xc3,0xc3,0xc3,0xc3,0xff,0xff,//完成
	0xff,0xff,0xc3,0xc3,0xc3,0xc3,0xff,0xff,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//14

	0xc3,0xc3,0xc3,0xc3,0xc3,0xc3,0xc3,0xc3,
	0xc3,0xc3,0xc3,0xc3,0xc3,0xc3,0xc3,0xc3,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//15

	0x00,0x00,0xc3,0xc3,0xc3,0xc3,0xc3,0xc3,
	0xff,0xff,0xc3,0xc3,0xc3,0xc3,0xc3,0xc3,
	0xc3,0xc3,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//16

	0x00,0x00,0xc3,0xc3,0xc3,0xc3,0xc3,0xc3,
	0x00,0x00,0xc3,0xc3,0xc3,0xc3,0xc3,0xc3,
	0xc3,0xc3,0x00,0x00,0x00,0x00,0x00,0x00,
	0xc3,0xc3,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//17

	0x00,0x00,0xc3,0xc3,0xc3,0xc3,0xc3,0xc3,
	0x00,0x00,0xc3,0xc3,0xc3,0xc3,0xc3,0xc3,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0xc3,0xc3,0x00,0x00,0x00,0x00,0x00,0x00,
	0xc3,0xc3,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//18

	0x00,0x00,0xc3,0xc3,0xc3,0xc3,0xc3,0xc3,
	0x00,0x00,0xc3,0xc3,0xc3,0xc3,0xc3,0xc3,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0xc3,0xc3,0x00,0x00,0x00,0x00,0x00,0x00,
	0xc3,0xc3,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//19

	0x00,0xc3,0xc3,0x00,0xc3,0xc3,0xc3,0xc3,
	0x00,0xc3,0xc3,0x00,0xc3,0xc3,0xc3,0xc3,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0xc3,0xc3,0x00,0x00,0x00,0x00,0x00,0x00,
	0xc3,0xc3,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//20

	0xc3,0xc3,0x00,0x00,0xc3,0xc3,0xc3,0xc3,
	0xc3,0xc3,0x00,0x00,0xc3,0xc3,0xc3,0xc3,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0xc3,0xc3,0x00,0x00,0x00,0x00,0x00,0x00,
	0xc3,0xc3,0x00,0x00,0x00,0x00,0x00,0x00,//21

	0x00,0x00,0x00,0x00,0xc3,0xc3,0xc3,0xc3,
	0xc3,0xc3,0x00,0x00,0xc3,0xc3,0xc3,0xc3,
	0xc3,0xc3,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0xc3,0xc3,0x00,0x00,0x00,0x00,0x00,
	0x00,0xc3,0xc3,0x00,0x00,0x00,0x00,0x00,//22

	0x00,0x00,0x00,0x00,0xc3,0xc3,0xc3,0xc3,
	0x00,0x00,0x00,0x00,0xc3,0xc3,0xc3,0xc3,
	0xc3,0xc3,0x00,0x00,0x00,0x00,0x00,0x00,
	0xc3,0xc3,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0xc3,0xc3,0x00,0x00,0x00,0x00,
	0x00,0x00,0xc3,0xc3,0x00,0x00,0x00,0x00,//23

	0x00,0x00,0x00,0xc3,0xc3,0x00,0xc3,0xc3,
	0x00,0x00,0x00,0xc3,0xc3,0x00,0xc3,0xc3,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0xc3,0xc3,0x00,0x00,0x00,0x00,0x00,0x00,
	0xc3,0xc3,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0xc3,0xc3,0x00,0x00,0x00,
	0x00,0x00,0x00,0xc3,0xc3,0x00,0x00,0x00,//24

	0x00,0x00,0xc3,0xc3,0x00,0x00,0xc3,0xc3,
	0x00,0x00,0xc3,0xc3,0x00,0x00,0xc3,0xc3,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0xc3,0xc3,0x00,0x00,0x00,0x00,0x00,0x00,
	0xc3,0xc3,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0xc3,0xc3,0x00,0x00,
	0x00,0x00,0x00,0x00,0xc3,0xc3,0x00,0x00,//25

	0x00,0xc3,0xc3,0x00,0x00,0x00,0xc3,0xc3,
	0x00,0xc3,0xc3,0x00,0x00,0x00,0xc3,0xc3,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0xc3,0xc3,0x00,0x00,0x00,0x00,0x00,0x00,
	0xc3,0xc3,0x00,0x00,0x00,0xc3,0xc3,0x00,
	0x00,0x00,0x00,0x00,0x00,0xc3,0xc3,0x00,//26

};
uchar code x_table[]={//四方块X轴心旋转
	0xc3,0xc3,0x00,0x00,0x00,0x00,0xc3,0xc3,
	0xc3,0xc3,0x00,0x00,0x00,0x00,0xc3,0xc3,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0xc3,0xc3,0x00,0x00,0x00,0x00,0xc3,0xc3,
	0xc3,0xc3,0x00,0x00,0x00,0x00,0xc3,0xc3,//1

	0x00,0x00,0x00,0x00,0x00,0xc3,0xc3,0x00,
	0xc3,0xc3,0x00,0x00,0x00,0xc3,0xc3,0x00,
	0xc3,0xc3,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0xc3,0xc3,
	0x00,0xc3,0xc3,0x00,0x00,0x00,0xc3,0xc3,
	0x00,0xc3,0xc3,0x00,0x00,0x00,0x00,0x00,//2

	0x00,0x00,0x00,0x00,0xc3,0xc3,0x00,0x00,
	0x00,0x00,0x00,0x00,0xc3,0xc3,0x00,0x00,
	0xc3,0xc3,0x00,0x00,0x00,0x00,0x00,0x00,
	0xc3,0xc3,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0xc3,0xc3,
	0x00,0x00,0x00,0x00,0x00,0x00,0xc3,0xc3,
	0x00,0x00,0xc3,0xc3,0x00,0x00,0x00,0x00,
	0x00,0x00,0xc3,0xc3,0x00,0x00,0x00,0x00,//3

	0x00,0x00,0x00,0xc3,0xc3,0x00,0x00,0x00,
	0x00,0x00,0x00,0xc3,0xc3,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0xc3,0xc3,0x00,0x00,0x00,0x00,0xc3,0xc3,
	0xc3,0xc3,0x00,0x00,0x00,0x00,0xc3,0xc3,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0xc3,0xc3,0x00,0x00,0x00,
	0x00,0x00,0x00,0xc3,0xc3,0x00,0x00,0x00,//4

	0x00,0x00,0xc3,0xc3,0x00,0x00,0x00,0x00,
	0x00,0x00,0xc3,0xc3,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0xc3,0xc3,
	0x00,0x00,0x00,0x00,0x00,0x00,0xc3,0xc3,
	0xc3,0xc3,0x00,0x00,0x00,0x00,0x00,0x00,
	0xc3,0xc3,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0xc3,0xc3,0x00,0x00,
	0x00,0x00,0x00,0x00,0xc3,0xc3,0x00,0x00,//5

	0x00,0xc3,0xc3,0x00,0x00,0x00,0x00,0x00,
	0x00,0xc3,0xc3,0x00,0x00,0x00,0xc3,0xc3,
	0x00,0x00,0x00,0x00,0x00,0x00,0xc3,0xc3,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0xc3,0xc3,0x00,0x00,0x00,0x00,0x00,0x00,
	0xc3,0xc3,0x00,0x00,0x00,0xc3,0xc3,0x00,
	0x00,0x00,0x00,0x00,0x00,0xc3,0xc3,0x00,//6
};
/***************************************************************/
uchar code tab_rain[]={//rain
0X00,0X84,0X01,0X00,0X00,0X01,0X02,0X44,
0X84,0X00,0X24,0X08,0X04,0X20,0X80,0X00,
0X00,0X20,0X00,0X00,0X20,0X00,0X40,0X00,
0X00,0X04,0X00,0X40,0X00,0X00,0X08,0X00,

0X40,0X00,0X10,0X00,0X00,0X04,0X04,0X11,
0X00,0X41,0X00,0X00,0X80,0X00,0X40,0X00,
0X00,0X00,0X00,0X24,0X01,0X18,0X00,0X00,
0X22,0X10,0X02,0X00,0X40,0X00,0X02,0X00
};
uchar code sin_cube_table[]={//14帧
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,
	0x00,0x00,0x00,0x00,0x00,0x00,0xff,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0xff,0x00,
	0xff,0x00,0x00,0x00,0x00,0xff,0x00,0x00,
	0x00,0xff,0x00,0x00,0xff,0x00,0x00,0x00,
	0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,

	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,
	0x00,0x00,0x00,0x00,0x00,0x00,0xff,0x00,
	0x00,0x00,0x00,0x00,0x00,0xff,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0xff,0x00,0x00,
	0x00,0x00,0x00,0x00,0xff,0x00,0x00,0x00,
	0xff,0x00,0x00,0xff,0x00,0x00,0x00,0x00,
	0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,

	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,
	0x00,0x00,0x00,0x00,0x00,0x00,0xff,0x00,
	0x00,0x00,0x00,0x00,0x00,0xff,0x00,0x00,
	0x00,0x00,0x00,0x00,0xff,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0xff,0x00,0x00,0x00,
	0x00,0x00,0x00,0xff,0x00,0x00,0x00,0x00,
	0x00,0x00,0xff,0x00,0x00,0x00,0x00,0x00,
	0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,

	0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,
	0x00,0x00,0x00,0x00,0x00,0xff,0x00,0x00,
	0x00,0x00,0x00,0x00,0xff,0x00,0x00,0x00,
	0x00,0x00,0x00,0xff,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0xff,0x00,0x00,0x00,0x00,
	0x00,0x00,0xff,0x00,0x00,0x00,0x00,0x00,
	0x00,0xff,0x00,0x00,0x00,0x00,0x00,0x00,
	0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,

	0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,
	0x00,0x00,0x00,0x00,0xff,0x00,0x00,0xff,
	0x00,0x00,0x00,0xff,0x00,0x00,0x00,0x00,
	0x00,0x00,0xff,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0xff,0x00,0x00,0x00,0x00,0x00,
	0x00,0xff,0x00,0x00,0x00,0x00,0x00,0x00,
	0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,

	0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,
	0x00,0x00,0x00,0xff,0x00,0x00,0xff,0x00,
	0x00,0x00,0xff,0x00,0x00,0x00,0x00,0xff,
	0x00,0xff,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0xff,0x00,0x00,0x00,0x00,0x00,0x00,
	0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,

	0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,
	0x00,0x00,0xff,0x00,0x00,0xff,0x00,0x00,
	0x00,0xff,0x00,0x00,0x00,0x00,0xff,0x00,
	0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,
	0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,

	0x00,0x00,0xff,0xff,0x00,0x00,0x00,0x00,
	0x00,0xff,0x00,0x00,0xff,0x00,0x00,0x00,
	0xff,0x00,0x00,0x00,0x00,0xff,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0xff,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0xff,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,

	0x00,0xff,0xff,0x00,0x00,0x00,0x00,0x00,
	0xff,0x00,0x00,0xff,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0xff,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0xff,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0xff,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0xff,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,

	0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0xff,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0xff,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0xff,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0xff,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0xff,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0xff,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,

	0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0xff,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0xff,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0xff,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0xff,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0xff,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0xff,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,

	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0xff,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0xff,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0xff,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0xff,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0xff,0x00,0x00,0xff,
	0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x00,

	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0xff,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0xff,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0xff,0x00,0x00,0x00,0x00,0xff,
	0x00,0x00,0x00,0xff,0x00,0x00,0xff,0x00,
	0x00,0x00,0x00,0x00,0xff,0xff,0x00,0x00,

	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,
	0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,
	0x00,0xff,0x00,0x00,0x00,0x00,0xff,0x00,
	0x00,0x00,0xff,0x00,0x00,0xff,0x00,0x00,
	0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00,
};
uchar code hart_table[]={//2帧心跳
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x18,0x00,0x00,0x00,0x00,0x00,
	0x00,0x18,0x3c,0x18,0x00,0x00,0x00,0x00,
	0x00,0x18,0x3c,0x18,0x00,0x00,0x00,0x00,
	0x00,0x3c,0x7e,0x3c,0x18,0x00,0x00,0x00,
	0x00,0x18,0x7e,0x18,0x00,0x00,0x00,0x00,
	0x00,0x00,0x24,0x00,0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,

	0x00,0x00,0x00,0x18,0x18,0x00,0x00,0x00,
	0x00,0x00,0x00,0x3c,0x3c,0x00,0x00,0x00,
	0x00,0x00,0x18,0x7e,0x7e,0x18,0x00,0x00,
	0x00,0x00,0x3c,0x7e,0x7e,0x3c,0x00,0x00,
	0x00,0x18,0x7e,0xff,0xff,0x7e,0x18,0x00,
	0x00,0x00,0x7e,0xff,0xff,0x7e,0x00,0x00,
	0x00,0x00,0x00,0x66,0x66,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
};
uchar code szfc_table[]={//数字浮出
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
	0X38,0X64,0X06,0X3E,0X66,0X66,0X24,0X18,//9
	0x00,0x00,0x00,0x00,
	0X3C,0X66,0X66,0X3C,0X66,0X66,0X24,0X18,//8
	0x00,0x00,0x00,0x00,
	0X30,0X30,0X30,0X18,0X0C,0X04,0X46,0X7E,//7
	0x00,0x00,0x00,0x00,
	0X18,0X26,0X66,0X78,0X60,0X66,0X24,0X18,//6
	0x00,0x00,0x00,0x00,
	0X18,0X64,0X46,0X06,0X1C,0X60,0X62,0X7E,//5
	0x00,0x00,0x00,0x00,
	0X0C,0X0C,0X7E,0X68,0X6C,0X2C,0X3C,0X1C,//4
	0x00,0x00,0x00,0x00,
	0x78,0x46,0x06,0x06,0x1c,0x06,0x46,0x3c,//3
	0x00,0x00,0x00,0x00,
	0xfc,0xc0,0x60,0x30,0x18,0xc6,0xc6,0x78,//2
	0x00,0x00,0x00,0x00,
	0x3c,0x18,0x18,0x18,0x18,0x18,0x38,0x18,//1
	0x00,0x00,0x00,0x00,
	0X18,0X24,0X66,0X66,0X66,0X66,0X24,0X18,//0
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
}; 


uchar code number[]={//数字,滚动字幕使用,从上至下
0x00,0x40,0x40,0x40,0x40,0x40,0x7E,0x00,/*"L",0*/
0x00,0x7E,0x40,0x7E,0x40,0x40,0x7E,0x00,/*"E",1*/
0x00,0x7C,0x46,0x42,0x42,0x46,0x7C,0x00,/*"D",2*/
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*" ",3*/
0x00,0x3C,0x62,0x40,0x40,0x61,0x3E,0x00,/*"C",4*/
0x00,0x42,0x42,0x42,0x42,0x42,0x3C,0x00,/*"U",5*/
0x00,0x7C,0x42,0x7C,0x42,0x41,0x7E,0x00,/*"B",6*/
0x00,0x7E,0x40,0x7E,0x40,0x40,0x7E,0x00,/*"E",7*/
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*" ",8*/
0x00,0x7C,0x46,0x42,0x42,0x46,0x7C,0x00,/*"D",9*/
0x00,0x38,0x10,0x10,0x10,0x10,0x38,0x00,/*"I",10*/
0x00,0xC2,0x64,0x38,0x10,0x10,0x10,0x00,/*"Y",11*/
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*" ",12*/
0x18,0x18,0x18,0xFF,0xFF,0x18,0x18,0x18,/*"+",13*/
0x18,0x18,0x18,0xFF,0xFF,0x18,0x18,0x18,/*"+",14*/


	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*" ",15*/
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*" ",16*/
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*" ",17*/
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*"Y",18*/
	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,/*" ",19*/
	0x00,0x44,0x44,0x7C,0x44,0x44,0x44,0x00,/*"H",20*/
	0x00,0x44,0x44,0x44,0x44,0x44,0x38,0x00,/*"U",21*/
	0x00,0x82,0x44,0x28,0x10,0x10,0x10,0x00,/*"Y",22*/
	0x00,0x10,0x28,0x28,0x7C,0x44,0x82,0x00,/*"A",23*/
	0x00,0x64,0x64,0x54,0x54,0x4C,0x44,0x00,/*"N",24*/
	0x00,0x78,0xC4,0x80,0x9C,0xC4,0x7C,0x00,/*"G",25*/
	0x00,0x10,0x10,0x10,0x10,0x00,0x10,0x00,/*"!",26*/
	0X38,0X64,0X06,0X3E,0X66,0X66,0X24,0X18,//"9"27
	0X3C,0X66,0X66,0X3C,0X66,0X66,0X24,0X18,//"8"28
	0X30,0X30,0X30,0X18,0X0C,0X04,0X46,0X7E,//"7"29
	0X18,0X26,0X66,0X78,0X60,0X66,0X24,0X18,//"6"30
	0X18,0X64,0X46,0X06,0X1C,0X60,0X62,0X7E,//"5"31
	0X0C,0X0C,0X7E,0X68,0X6C,0X2C,0X3C,0X1C,//"4"32
	0x78,0x46,0x06,0x06,0x1c,0x06,0x46,0x3c,//"3"33
	0xfc,0xc0,0x60,0x30,0x18,0xc6,0xc6,0x78,//"2"34
	0x3c,0x18,0x18,0x18,0x18,0x18,0x38,0x18,//"1"35
	0X18,0X24,0X66,0X66,0X66,0X66,0X24,0X18,//"0"36

//0XCC,0XCC,0X44,0X44,0X22,0X22,0X1f,0X00,

	//0XCC,0XCC,0X44,0X44,0X22,0X22,0X1f,0X00,
  	0X66,0X66,0X66,0X7E,0X66,0X66,0X3C,0X18,/*"A",37*/
	//0X00,0X99,0X99,0X99,0X99,0X99,0X66,0X00,
	0XC3,0XC7,0XCF,0XDF,0XFB,0XF3,0XE3,0XC3,/*"N",38*/
	//0X03,0X05,0XF9,0X81,0X81,0XF9,0X05,0X03,
	 0X7E,0X62,0X62,0X60,0X60,0X60,0X60,0X60,/*"L",39*/
	 0xFE,0xFE,0x60,0x30,0x18,0x0C,0xFE,0xFE/*"Z",40*/
};


/*---------------   初始化   --------------*/
void timer0init(void)
		{	
					BB=1;
					GG=1;
					RR=1;
					TMOD=0X12;	
					// IE=0X8B;
					EX0=1;
					ET0=1;		 	        
					EX1=0;
					ET1=1;//定时器1开中断 		               
					EA=1;		
					TH1=0x10;
					TL1=0x00;	
					IPH|=0X01;
					PX0=1;
					IT0=1;
					P1M0=0X7F;
					P1M1=0X80;
					P0M0=0xf8;	//P0口开漏输出
					P0M1=0xf0;	
					P3M0=0x00;	//P0口准双向输出
					P3M1=0X00;
					P2M0=0x00;	//P2口准双向输出
					P2M1=0X00;			
}
void initial595()
{
	SH_CP = 0;
	ST_CP = 0;
	DS = 0;
}
void initial5952()
{
	SH_CP2 = 0;
	ST_CP2 = 0;
	DS2 = 0;
}
/*---------------   发送数据   ---------------*/
void send_data(unsigned char d)
{
	unsigned char i;
	for(i=0;i<8;i++)
	{
		DS = d&0x80;	 //发送最低位
		SH_CP = 1;
		SH_CP = 0;		 //移位寄存器移位
		d = d<<1;		 //数据移位f
	}
}


void xiansi1()
{	
	send_data(buffer[0]);	  //u8
	send_data(buffer[1]);	  //u7
	send_data(buffer[2]);	  //u6
	send_data(buffer[3]);	  //u5
	send_data(buffer[4]);	  //u4
	send_data(buffer[5]);	  //u3
	send_data(buffer[6]);	  //u2
	send_data(buffer[7]);	  //u1

}
void delay(uint i)
{											
	char b;
	while (i--)
	{
	   b=bb;
		while(b--);
	}
}

/*************************************黎明途电子************************************************************/	
/*************************************脱机动画文件************************************************/
void sendbyte1(unsigned int num1,unsigned int num2,unsigned int num3,unsigned int num4)
{
	unsigned char i=0;
	for(i=0;i<8;i++)
	{
		DS = num1&0x01;	 //发送最低位
		SH_CP = 1;
		SH_CP = 0;		 //移位寄存器移位
	   num1=num1>>1;		 //数据移位f
	}

	 for(i=0;i<8;i++)
	{
		DS = num2&0x01;	 //发送最低位
		SH_CP = 1;
		SH_CP = 0;		 //移位寄存器移位
		num2 = num2>>1;		 //数据移位f
	}

	for(i=0;i<8;i++)
	{
		DS = num3&0x01;	 //发送最低位
		SH_CP = 1;
		SH_CP = 0;		 //移位寄存器移位
		num3 = num3>>1;		 //数据移位f
	}

	 for(i=0;i<8;i++)
	{
		DS = num4&0x01;	 //发送最低位
		SH_CP = 1;
		SH_CP = 0;		 //移位寄存器移位
		num4 = num4>>1;		 //数据移位f
	}
   
}			

void zhen(uchar *a,uchar v)
{
 char layer;

 while(v--)
 {
  
  for(layer=0;layer<8;layer++)
  {	
	sendbyte1(~a[layer*8+7],~a[layer*8+6],~a[layer*8+5],~a[layer*8+4]);
	sendbyte1(~a[layer*8+3],~a[layer*8+2],~a[layer*8+1],~a[layer*8+0]);
   
	cheng=0x01<<layer;
    DS2 =~cheng&0x01;	 //发送最低位
	    ST_CP=1;	
	    ST_CP=0;
		SH_CP2 = 1;
		SH_CP2 = 0;		 //移位寄存器移位
		ST_CP2=1;	
	    ST_CP2=0;					      
		delay(200);	

			 		
  }
 
 }
}
		
uchar display[8][8];

void clc()//全局清屏
{
  	unsigned char k;	  
 for(k=0;k<64;k++)
 {	//d=0xff; 
    
		DS = 0;	 //发送最低位
		SH_CP = 1;
		SH_CP = 0;		 //移位寄存器移位
	//	d = d<<1;		 //数据移位f

  }
	  ST_CP=1;	
	  ST_CP=0; 	
}
/*判断一个数值的第n位，是1还是0，并返回相应数值*/
uchar judgebit(uchar num,uchar b)
{
	char n;
	num=num&(1<<b);
	if (num)
	n=1;
	else
	n=0;
	return n;
}

uchar abs(uchar a)
{
	uchar b;
	b=a/10;
	a=a-b*10;
	if (a>=5)
	b++;
	return b;
}

uchar abss(char a)
{
	if (a<0)
	a=-a;
	return a;
}

void max(uchar *a,uchar *b)
{
   uchar t;
   if ((*a)>(*b))
   {
		t=(*a);
		(*a)=(*b);
		(*b)=t;   
   }
}

uchar maxt(uchar a,uchar b,uchar c)
{
	if (a<b)
	a=b;
	if (a<c)
	a=c;
	return a;
}
void clear(char le)//填充表格

{
	uchar i,j;
	for (j=0;j<8;j++)
	{
		for (i=0;i<8;i++)
		display[j][i]=le;
	}
}
void trailler(uint speed) //IC顺向移动函数 清除后3
{
	char i,j;
	for (i=6;i>=-3;i--)
	{
		if (i>=0)
		{
			for (j=0;j<8;j++)
			display[j][i]=display[j][i+1];
		}
		if (i<4)
		{
			for (j=0;j<8;j++)
			display[j][i+4]=0;
		}
		delay(speed);
	}
}

void trailler2(uint speed) //IC顺向移动函数不清后3
{
	char i,j;
	for (i=6;i>=-3;i--)
	{
		if (i>=0)
		{
			for (j=0;j<8;j++)
			display[j][i]=display[j][i+1];
		}
		
		delay(speed);
	}
}

void point(uchar x,uchar y,uchar z,uchar le)
{
	uchar ch1,ch0;
	ch1=1<<x;
	ch0=~ch1;
	if (le) 
	display[z][y]=display[z][y]|ch1;
	else 
	display[z][y]=display[z][y]&ch0;

}

void type(uchar cha,uchar y) //1 2 3 4 心 运算函数
{	
	uchar xx;
	for (xx=0;xx<8;xx++)
	{
	display[xx][y]=table_cha[cha][xx];
	}
}

void cirp(char cpp,uchar dir,uchar le)
{
	uchar a,b,c,cp;
	if ((cpp<128)&(cpp>=0))
	{
		if (dir)
		cp=127-cpp;
		else 
		cp=cpp; 
		a=(dat[cp]>>5)&0x07;
		b=(dat[cp]>>2)&0x07;
		c=dat[cp]&0x03;
		if (cpp>63)
		c=7-c;
		point (a,b,c,le);
	}
}
void line(uchar x1,uchar y1,uchar z1,uchar x2,uchar y2,uchar z2,uchar le)
{
	char t,a,b,c,a1,b1,c1,i;
	a1=x2-x1;
	b1=y2-y1;
	c1=z2-z1;
	t=maxt(abss(a1),abss(b1),abss(c1));
	a=x1*10;
	b=y1*10;
	c=z1*10;
	a1=a1*10/t;
	b1=b1*10/t;
	c1=c1*10/t;
	for (i=0;i<t;i++)
	{
		point(abs(a),abs(b),abs(c),le);
		a+=a1;
		b+=b1;
		c+=c1;
	}
	point(x2,y2,z2,le);
}
void box(unsigned char x1,unsigned char z1,unsigned char y1,unsigned char x2,unsigned char z2,unsigned char y2,unsigned char fill,unsigned char le)
{
	uchar i,j,t=0;
	max(&x1,&x2);
	max(&y1,&y2);
	max(&z1,&z2);
	for (i=x1;i<=x2;i++)
		t|=1<<i;
	if (!le)
		t=~t;
	if (fill)
	{
		if (le)
		{
			for (i=z1;i<=z2;i++)
			{
				for (j=y1;j<=y2;j++)
					display[j][i]|=t;
			}
		}
		else
		{
			for (i=z1;i<=z2;i++)
			{
				for (j=y1;j<=y2;j++)
					display[j][i]&=t;
			}
		}
	}
	else
	{
		if (le)
		{
			display[y1][z1]|=t;
			display[y2][z1]|=t;
			display[y1][z2]|=t;
			display[y2][z2]|=t;
		}
		else
		{
		 	display[y1][z1]&=t;
			display[y2][z1]&=t;
			display[y1][z2]&=t;
			display[y2][z2]&=t;
		}
		t=(0x01<<x1)|(0x01<<x2);
		if (!le)
			t=~t;
		if (le)
		{
			for (j=z1;j<=z2;j+=(z2-z1))
			{
				for (i=y1;i<=y2;i++)
					display[i][j]|=t;
			}
			for (j=y1;j<=y2;j+=(y2-y1))
			{
				for (i=z1;i<=z2;i++)
					display[j][i]|=t;
			}
		}
		else
		{
			for (j=z1;j<=z2;j+=(z2-z1))
			{
				for (i=y1;i<=y2;i++)
				{
				display[i][j]&=t;
				}
			}
			for (j=y1;j<=y2;j+=(y2-y1))
			{
				for (i=z1;i<=z2;i++)
				{
				display[j][i]&=t;
				}
			}
		}
	}
}
void box_apeak_xy(uchar x1,uchar y1,uchar z1,uchar x2,uchar y2,uchar z2,uchar fill,uchar le)
{
	uchar i;
	max(&z1,&z2);
	if (fill)
	{
		for (i=z1;i<=z2;i++)
		{
			line (x1,y1,i,x2,y2,i,le);
		} 
	} 
	else
	{
		line (x1,y1,z1,x2,y2,z1,le);
		line (x1,y1,z2,x2,y2,z2,le);
		line (x2,y2,z1,x2,y2,z2,le);
		line (x1,y1,z1,x1,y1,z2,le);
	}
}

void poke(uchar n,uchar x,uchar y)	// LOVE YOU 显示运算函数内部函数
{
	uchar i;
	for (i=0;i<8;i++)
	{
	 point(x,y,i,judgebit(n,i));
	}
}
void boxtola(char i,uchar n)  //LOVE YOU 显示运算函数
{
	if ((i>=0)&(i<8))
	{
		poke(n,0,7-i);
	}
	if ((i>=8)&(i<16))
	{
		poke(n,i-8,0);
	}
	if ((i>=16)&(i<24))
	{
		poke(n,7,i-16);
	}

}
void rolldisplay(uint speed)  //执行 LOVE YOU 移动
{
	uchar j;
	char i,a;
	for (i=23;i>-111;i--)
	{
		for (j=0;j<111;j++)
		{
			a=i+j;
			if ((a>=0)&(a<24))
			boxtola(a,table_id[j]);
		}
		delay(speed);
	}
}	


void roll_apeak_yz(uchar n,uint speed)
{
	uchar i;
	switch(n)
	{
		case 1:
			for (i=0;i<7;i++)
			{
				display[i][7]=0;
				display[7][6-i]=255;
				delay(speed);
			};
			break;
		case 2:
			for (i=0;i<7;i++)
			{
				display[7][7-i]=0;
				display[6-i][0]=255;
				delay(speed);
			};
			break;
		case 3:
			for (i=0;i<7;i++)
			{
				display[7-i][0]=0;
				display[0][i+1]=255;
				delay(speed);
			};
			break;
		case 0:
			for (i=0;i<7;i++)
			{
				display[0][i]=0;
				display[i+1][7]=255;
				delay(speed);
			};
	}
}
void roll_apeak_xy(uchar n,uint speed)
{
	uchar i;
	switch(n)
	{
		case 1:
			for (i=0;i<7;i++)
			{
				line(0,i,0,0,i,7,0);
				line(i+1,7,0,i+1,7,7,1);
				delay(speed);
			};
			break;
		case 2:
			for (i=0;i<7;i++)
			{
				line(i,7,0,i,7,7,0);
				line(7,6-i,0,7,6-i,7,1);
				delay(speed);
			};
			break;
		case 3:
			for (i=0;i<7;i++)
			{
				line(7,7-i,0,7,7-i,7,0);
				line(6-i,0,0,6-i,0,7,1);
				delay(speed);
			};
			break;
		case 0:
			for (i=0;i<7;i++)
			{
				line(7-i,0,0,7-i,0,7,0);
				line(0,i+1,0,0,i+1,7,1);
				delay(speed);
			};
	}
}
void roll_3_xy(uchar n,uint speed)
{
	uchar i;
	switch(n)
	{
		case 1:
			for (i=0;i<8;i++)
			{
				box_apeak_xy (0,i,0,7,7-i,7,1,1);
				delay(speed);
				if (i<7)
				box_apeak_xy (3,3,0,0,i,7,1,0);
			};
			break;
		case 2:
			for (i=0;i<8;i++)
			{
				box_apeak_xy (7-i,0,0,i,7,7,1,1);
				delay(speed);
				if (i<7)
				box_apeak_xy (3,4,0,i,7,7,1,0);
			};
			break;
		case 3:
			for (i=0;i<8;i++)
			{
				box_apeak_xy (0,i,0,7,7-i,7,1,1);
				delay(speed);
				if (i<7)
				box_apeak_xy (4,4,0,7,7-i,7,1,0);
			};
			break;
		case 0:
			for (i=0;i<8;i++)
			{
				box_apeak_xy (7-i,0,0,i,7,7,1,1);
				delay(speed);
				if (i<7)
				box_apeak_xy (4,3,0,7-i,0,7,1,0);
			};
	}
}

void tranoutchar(uchar c,uint speed)	//lly	方块移动漏字
{
	uchar i,j,k,a,i2=0;
	for (i=0;i<8;i++)
	{
		if (i<7)
		box_apeak_xy (i+1,0,0,i+1,7,7,1,1);
		box_apeak_xy (i2,0,0,i2,7,7,1,0);
		a=0;
		i2=i+1;
		for (j=0;j<=i;j++)
		{
			a=a|(1<<j);
		}
		for (k=0;k<8;k++)
		{
			display[k][3]|=table_cha[c][k]&a;
			display[k][4]|=table_cha[c][k]&a;
		}
		delay(speed);
	}
}

void trans(uchar z,uint speed)//	 左移动层
{
	uchar i,j;
	for (j=0;j<8;j++)
	{
		for (i=0;i<8;i++)
		{
			display[z][i]>>=1;
		}
		delay(speed);
	}
}
void ytrans(uchar z,uint speed)//	 右移动层
{
	uchar i,j;
	for (j=0;j<8;j++)
	{
		for (i=0;i<8;i++)
		{
			display[z][i]<<=1;
		}
		delay(speed);
	}
}

void transss()	   //右移动画
{
	uchar i,j;
	for (i=0;i<8;i++)
	{
		for (j=0;j<8;j++)
		display[i][j]<<=1;
	}
}

void ztransss()	   //左移动画
{
	uchar i,j;
	for (i=0;i<8;i++)
	{
		for (j=0;j<8;j++)
		display[i][j]>>=1;
	}
}

/*From now on,the function below is to display the flash.*/
void flash_1()
{


	clear(0);
	type(1,7);	   //A
	delay(1000);
	trailler(10000); //向前移动调用	   
	delay(65000);
	transss();
	delay(10000);
	transss();
	delay(10000);
	transss();
	trans(0,1800);
	trans(1,1800);
	trans(2,1800);
	trans(3,1800);
	trans(4,1800);
	trans(5,1800);
	trans(6,1800);
	trans(7,1800);
	
	type(2,7);	   //B
	delay(1000);
	trailler(10000);  //向前移动调用
	delay(65000);	
	ztransss();
	delay(10000);
	ztransss();
	delay(10000);
	ztransss();
	ytrans(0,1800);
	ytrans(1,1800);
	ytrans(2,1800);
	ytrans(3,1800);
	ytrans(4,1800);
	ytrans(5,1800);
	ytrans(6,1800);
	ytrans(7,1800);

	type(3,7);	   //C
	delay(1000);
	trailler(10000);   //向前移动调用
	delay(65000);	
	transss();
	delay(10000);
	transss();
	delay(10000);
	transss();
	trans(0,1800);
	trans(1,1800);
	trans(2,1800);
	trans(3,1800);
	trans(4,1800);
	trans(5,1800);
	trans(6,1800);
	trans(7,1800);

	type(4,7);	   //D
	delay(1000);
	trailler(10000);   //向前移动调用
	delay(65000);	
	ztransss();
	delay(10000);
	ztransss();
	delay(10000);
	ztransss();
    ytrans(0,1800);
	ytrans(1,1800);
	ytrans(2,1800);
	ytrans(3,1800);
	ytrans(4,1800);
	ytrans(5,1800);
	ytrans(6,1800);
	ytrans(7,1800);
	clear(0);
	rolldisplay(20000); //Love You 调用


    type(0,7);			//心形图案调用
	delay(1000);
	trailler(12000);	//向前移动调用
	delay(65534);
	delay(65534);
}
void flash_2()
{
	uchar i;
	for (i=129;i>0;i--)
	{
		cirp(i-2,0,1);
		delay(4000);
		cirp(i-1,0,0);
	}
	delay(4000);	
	for (i=0;i<136;i++)
	{
		cirp(i,1,1);
		delay(4000);
		cirp(i-8,1,0);
	}
	delay(4000);
		for (i=129;i>0;i--)
	{
		cirp(i-2,0,1);
		delay(4000);
	}
	delay(4000);
		for (i=0;i<128;i++)
	{
		cirp(i-8,1,0);
		delay(4000);
	}
	delay(60000);	
	delay(60000);
}
void flash_3()
{
	char i;
	for (i=0;i<8;i++)
	{
		box_apeak_xy(0,i,0,7,i,7,1,1);
		delay(9000);
		if (i<7)
		box_apeak_xy(0,i,0,7,i,7,1,0);
	}
	for (i=7;i>=0;i--)
	{
		box_apeak_xy(0,i,0,7,i,7,1,1);
		delay(9000);
		if (i>0)
		box_apeak_xy(0,i,0,7,i,7,1,0);
	}
	for (i=0;i<8;i++)
	{
		box_apeak_xy(0,i,0,7,i,7,1,1);
		delay(9000);
		if (i<7)
		box_apeak_xy(0,i,0,7,i,7,1,0);
	}
}
void flash_4()
{
	char i,j,an[8];
	for (j=7;j<15;j++)
		an[j-7]=j;
	for (i=0;i<=16;i++)
	{
		for (j=0;j<8;j++)
		{
			if ((an[j]<8)&(an[j]>=0))
			line(0,an[j],j,7,an[j],j,1);
		}
		for (j=0;j<8;j++)
		{
			if (((an[j]+1)<8)&(an[j]>=0))
			line(0,an[j]+1,j,7,an[j]+1,j,0);
		}
		for (j=0;j<8;j++)
		{
			if (an[j]>0)
			an[j]--;
		}
		delay(15000);
	}
	for (j=0;j<8;j++)
		an[j]=1-j;
	for (i=0;i<=16;i++)
	{
		for (j=0;j<8;j++)
		{
			if ((an[j]<8)&(an[j]>=0))
			line(0,an[j],j,7,an[j],j,1);
		}
		for (j=0;j<8;j++)
		{
			if (((an[j]-1)<7)&(an[j]>0))
			line(0,an[j]-1,j,7,an[j]-1,j,0);
		}
		for (j=0;j<8;j++)
		{
			if (an[j]<7)
			an[j]++;
		}
		delay(15000);
	}
}

void flash_5()

{

      uchar i,j,t,x,y;

      uchar code daa[13]={0,1,2,0x23,5,6,7,6,5,0x23,2,1,0};

      for (j=0;j<5;j++)

      {

               for (i=0;i<13;i++)

               {

                         if (daa[i]>>4)

                         {

                                  t=daa[i]&0x0f;

                                  line (0,0,t+1,0,7,t+1,1);

                         }

                         else 

                                  t=daa[i];

                         line (0,0,t,0,7,t,1);

                         transss();

                         delay(10000);

               }

      }

      for (j=1;j<8;j++)

      {

               if (j>3)

                         t=4;

               else

                         t=j;

               for (i=0;i<24;i+=j)

               {

                         x=dat3[i]>>4;

                         y=dat3[i]&0x0f;

                         box_apeak_xy(0,x,y,0,x+1,y+1,1,1);

                         transss();

                         delay(10000);

               }

      }

      for (j=1;j<8;j++)

      {

               if (j>3)

                         t=4;

               else

                         t=j;

               for (i=0;i<24;i+=j)

               {

                         x=dat3[i]>>4;

                         y=dat3[i]&0x0f;

                         point (0,x,y,1);

                         transss();

                         delay(10000);

               }

      }

}

void flash_6()//rain

{

      uchar i,j,k,z;

      roll_apeak_yz(1,8000);

      roll_apeak_yz(2,7000);

      roll_apeak_yz(3,6000);

      roll_apeak_yz(0,5000);

      roll_apeak_yz(1,4000);

      roll_apeak_yz(2,3000);

      roll_apeak_yz(3,2000);

      for (i=0;i<3;i++)//下雨点字

               {

                         for (j=0;j<8;j++)

                         {

                                  for (k=0;k<8;k++)

                                  {

                                           if ((table_3p[i][j]>>k)&1)

                                           {

                                                     for (z=1;z<8;z++)

                                                              {

                                                                       point (j,7-k,z,1);

                                                                       if (z-1)

                                                                       point (j,7-k,z-1,0);

                                                                       delay(2000);
																																			 
																																			// delay(5000);//下雨速度。。。
																																			// delay(5000);

                                                              }
																															
																														//delay(5000);
																															delay(5000);

                                           }

                                  }

                         }
												 delay(5000);
		
                         trans(7,15000);

               }

}

void flash_7()

{

      uchar i;

      uint a=3000;

     // roll_apeak_yz(0,7000);

     // roll_apeak_yz(1,7000);

     // roll_apeak_yz(2,7000);

     // roll_apeak_yz(3,7000);

      roll_apeak_yz(0,8000);

      roll_apeak_yz(1,7500);

      roll_apeak_yz(2,7000);

      roll_apeak_yz(3,6500);

      roll_apeak_yz(0,6000);

      roll_apeak_yz(1,5500);

      roll_apeak_yz(2,5000);

      roll_apeak_xy(0,4500);

      roll_apeak_xy(1,4000);

      roll_apeak_xy(2,3500);

      roll_apeak_xy(3,3000);

      roll_apeak_xy(0,2500);

      roll_apeak_xy(1,2000);

      roll_apeak_xy(2,1500);

      roll_apeak_xy(3,1000);

      for (i=0;i<8;i++)

      {

               box_apeak_xy (0,i,0,7-i,i,7,1,1);

               delay(a);

      }

      delay(2000);

      roll_3_xy(0,a);

      delay(2000);

      roll_3_xy(1,a);

      delay(2000);

      roll_3_xy(2,a);

      delay(2000);

      roll_3_xy(3,a);

      delay(2000);

      roll_3_xy(0,a);

      delay(2000);

      roll_3_xy(1,a);

      delay(2000);

      roll_3_xy(2,a);

      delay(2000);

      roll_3_xy(3,a);

      for (i=7;i>0;i--)

      {

               box_apeak_xy(i,0,0,i,7,7,1,0);

               delay(a);

      }

}

void flash_8()

{

      uchar i;

      for (i=5;i<8;i++)

      {

               tranoutchar(i,20000);

               delay(600000);

               delay(600000);
							     delay(600000);
									     delay(600000);

      }

}

void flash_9()

{

      char i;

      uchar j,an[8],x,y,t,x1,y1;

      for (i=0;i<8;i++)

      {

               box_apeak_xy (i,0,0,i,7,7,1,1);

               if (i)

               box_apeak_xy (i-1,0,0,i-1,7,7,1,0);

               delay(10000);

      }

      roll_apeak_xy(3,5000);

      roll_apeak_xy(0,5000);

      roll_apeak_xy(1,5000);

      for (i=0;i<7;i++)

      {

               line(6-i,6-i,0,6-i,6-i,7,1);

               line(i,7,0,i,7,7,0);

               delay(10000);

      }

      for (i=0;i<8;i++)

               an[i]=14;

      for (i=0;i<85;i++)

      {

               clear(0);

               for (j=0;j<8;j++)

               {

                         t=an[j]%28;

                         x=dat2[t]>>5;

                         y=(dat2[t]>>2)&0x07;

                         t=(an[j]-14)%28;

                         x1=dat2[t]>>5;

                         y1=(dat2[t]>>2)&0x07;

                         line(x,y,j,x1,y1,j,1);

               }

               for (j=0;j<8;j++)

               {

               if ((i>j)&(j>i-71))

               an[j]++;

               } 

               delay(5000);

      }

      for (i=0;i<85;i++)

      {

               clear(0);

               for (j=0;j<8;j++)

               {

                         t=an[j]%28;

                         x=dat2[t]>>5;

                         y=(dat2[t]>>2)&0x07;

                         t=(an[j]-14)%28;

                         x1=dat2[t]>>5;

                         y1=(dat2[t]>>2)&0x07;

                         line(x,y,j,x1,y1,j,1);

               }

               for (j=0;j<8;j++)

               {

               if ((i>j)&(j>i-71))

               an[j]--;

               } 

               delay(5000);

      }

      for (i=0;i<29;i++)

      {

               clear(0);



               t=an[0]%28;

               x=dat2[t]>>5;

               y=(dat2[t]>>2)&0x07;

               t=(an[0]-14)%28;

               x1=dat2[t]>>5;

               y1=(dat2[t]>>2)&0x07;

               box_apeak_xy(x,y,0,x1,y1,7,0,1);

               box_apeak_xy(x,y,1,x1,y1,6,0,1);

               an[0]++; 

               delay(5000);

      }

      for (i=0;i<16;i++)

      {

               clear(0);



               t=an[0]%28;

               x=dat2[t]>>5;

               y=(dat2[t]>>2)&0x07;

               t=(an[0]-14)%28;

               x1=dat2[t]>>5;

               y1=(dat2[t]>>2)&0x07;

               box_apeak_xy(x,y,0,x1,y1,7,1,1);

               an[0]--; 

               delay(5000);

      }

      for (i=0;i<8;i++)

      {

               line(i,i,0,0,0,i,0);

               delay(5000);

      }

      for (i=1;i<7;i++)

      {

               line(i,i,7,7,7,i,0);

               delay(5000);

      }

      for (i=1;i<8;i++)

      {

               clear(0);

               box(7,7,7,7-i,7-i,7-i,0,1);

               delay(10000);

      }

      for (i=1;i<7;i++)

      {

               clear(0);

               box(0,0,0,7-i,7-i,7-i,0,1);

               delay(10000);

      }

      for (i=1;i<8;i++)

      {

               clear(0);

               box(0,0,0,i,i,i,0,1);

               delay(10000);

      }

      for (i=1;i<7;i++)

      {

               clear(0);

               box(7,0,0,i,7-i,7-i,0,1);

               delay(10000);

      }

      for (i=1;i<8;i++)

      {

               box(7,0,0,7-i,i,i,1,1);

               delay(10000);

      }

      for (i=1;i<7;i++)

      {

               clear(0);

               box(0,7,7,7-i,i,i,1,1);
							
               delay(10000);

      }

}

void flash_10()

{

      uchar i,j,an[4],x,y,t;

      for (i=1;i<7;i++)

      {

               clear(0);

               box(0,6,6,1,7,7,1,1);

               box(i,6,6-i,i+1,7,7-i,1,1);

               box(i,6,6,i+1,7,7,1,1);

               box(0,6,6-i,1,7,7-i,1,1);

               box(0,6-i,6,1,7-i,7,1,1);

               box(i,6-i,6-i,i+1,7-i,7-i,1,1);

               box(i,6-i,6,i+1,7-i,7,1,1);

               box(0,6-i,6-i,1,7-i,7-i,1,1);

               delay(10000);

      }

      for (i=0;i<4;i++)

      {

               an[i]=6*i;

      }

      for (i=0;i<35;i++)

      {

               clear(0);

               for(j=0;j<4;j++)

               {

                         t=an[j]%24;

                         x=dat3[t]>>4;

                         y=dat3[t]&0x0f;

                         box(x,y,0,x+1,y+1,1,1,1);

                         box(x,y,6,x+1,y+1,7,1,1);

               }

               for (j=0;j<4;j++)

               an[j]++; 

               delay(10000);

      }

      for (i=0;i<35;i++)

      {

               clear(0);

               for(j=0;j<4;j++)

               {

                         t=an[j]%24;

                         x=dat3[t]>>4;

                         y=dat3[t]&0x0f;

                         box(x,y,0,x+1,y+1,1,1,1);

                         box(x,y,6,x+1,y+1,7,1,1);

               }

               for (j=0;j<4;j++)

               an[j]--; 

               delay(10000);

      }

      for (i=0;i<35;i++)

      {

               clear(0);

               for(j=0;j<4;j++)

               {

                         t=an[j]%24;

                         x=dat3[t]>>4;

                         y=dat3[t]&0x0f;

                         box(x,0,y,x+1,1,y+1,1,1);

                         box(x,6,y,x+1,7,y+1,1,1);

               }

               for (j=0;j<4;j++)

               an[j]++; 

               delay(10000);

      }

      for (i=0;i<36;i++)

      {

               clear(0);

               for(j=0;j<4;j++)

               {

                         t=an[j]%24;

                         x=dat3[t]>>4;

                         y=dat3[t]&0x0f;

                         box(x,0,y,x+1,1,y+1,1,1);

                         box(x,6,y,x+1,7,y+1,1,1);

               }

               for (j=0;j<4;j++)

               an[j]--; 

               delay(10000);

      }

      for (i=6;i>0;i--)

      {

               

               clear(0);

               box(0,6,6,1,7,7,1,1);

               box(i,6,6-i,i+1,7,7-i,1,1);

               box(i,6,6,i+1,7,7,1,1);

               box(0,6,6-i,1,7,7-i,1,1);

               box(0,6-i,6,1,7-i,7,1,1);

               box(i,6-i,6-i,i+1,7-i,7-i,1,1);

               box(i,6-i,6,i+1,7-i,7,1,1);

               box(0,6-i,6-i,1,7-i,7-i,1,1);

               delay(30000);

      }

}

void flash_11()

{


      uchar i,j,t,x,y;

      uchar code daa[13]={0,1,2,0x23,5,6,7,6,5,0x23,2,1,0};

      for (j=0;j<5;j++)

      {

               for (i=0;i<13;i++)

               {

                         if (daa[i]>>4)

                         {

                                  t=daa[i]&0x0f;

                                  line (0,0,t+1,0,7,t+1,1);

                         }

                         else 

                                  t=daa[i];

                         line (0,0,t,0,7,t,1);

                         transss();

                         delay(10000);

               }

      }

      for (j=1;j<8;j++)

      {

               if (j>3)

                         t=4;

               else

                         t=j;

               for (i=0;i<24;i+=j)

               {

                         x=dat3[i]>>4;

                         y=dat3[i]&0x0f;

                         box_apeak_xy(0,x,y,0,x+1,y+1,1,1);

                         transss();

                         delay(10000);

               }

      }

      for (j=1;j<8;j++)

      {

               if (j>3)

                         t=4;

               else

                         t=j;

               for (i=0;i<24;i+=j)

               {

                         x=dat3[i]>>4;

                         y=dat3[i]&0x0f;

                         point (0,x,y,1);

                         transss();

                         delay(10000);

               }

      }

}

void flash_12()

{

         uint a=15000;//a=delay

         char i=8,j,an[4];

         //1

         for (j=7;j<11;j++)

                   an[j-7]=j;

         while(i--)

         {

                   for (j=0;j<4;j++)

                   {

                            if (an[j]<8)

                            box_apeak_xy(j,an[j],j,7-j,an[j],7-j,0,1);

                            if (an[j]<7)

                            box_apeak_xy(j,an[j]+1,j,7-j,an[j]+1,7-j,0,0);

                   }

                   for (j=0;j<4;j++)

                   {

                            if (an[j]>3)

                            an[j]--;

                   }

                   delay(a);

         }

         //2

         i=3;

         for (j=0;j<4;j++)

         an[j]=5-j;

         while(i--)

         {

                   for (j=1;j<4;j++)

                   {

                            if (an[j]<4)

                            box_apeak_xy(j,an[j],j,7-j,an[j],7-j,0,1);

                            if (an[j]<3)

                            box_apeak_xy(j,an[j]+1,j,7-j,an[j]+1,7-j,0,0);

                   }

                   for (j=0;j<4;j++)

                   {

                            if (an[j]>0)

                            an[j]--;

                   }

                   delay(a);

         }

         //3

         i=3;

         for (j=1;j<4;j++)

         an[j]=4-j;

         while(i--)

         {

                   for (j=1;j<4;j++)

                   {

                            if (an[j]>=0)

                            box_apeak_xy(j,an[j],j,7-j,an[j],7-j,0,1);

                            if (an[j]>0)

                            box_apeak_xy(j,an[j]-1,j,7-j,an[j]-1,7-j,0,0);

                   }

                   for (j=1;j<4;j++)

                   {

                            if (an[j]<3)

                            an[j]++;

                   }

                   delay(a);

         }

 

         //4

         i=3;

         for (j=0;j<4;j++)

         an[j]=j+1;

         while(i--)

         {

                   for (j=1;j<4;j++)

                   {

                            if (an[j]>3)

                            box_apeak_xy(j,an[j],j,7-j,an[j],7-j,0,1);

                            if (an[j]>3)

                            box_apeak_xy(j,an[j]-1,j,7-j,an[j]-1,7-j,0,0);

                   }

                   for (j=0;j<4;j++)

                            an[j]++;

                   delay(a);

         }

         //5

         i=3;

         for (j=3;j<6;j++)

                   an[j-2]=j;

         while(i--)

         {

                   for (j=1;j<4;j++)

                   {

                            box_apeak_xy(j,an[j],j,7-j,an[j],7-j,0,1);

                            box_apeak_xy(j,an[j]+1,j,7-j,an[j]+1,7-j,0,0);

                   }

                   for (j=0;j<4;j++)

                   {

                            if (an[j]>3)

                            an[j]--;

                   }

                   delay(a);

         }

         //6

         i=3;

         for (j=0;j<4;j++)

         an[j]=5-j;

         while(i--)

         {

                   for (j=1;j<4;j++)

                   {

                            if (an[j]<4)

                            box_apeak_xy(j,an[j],j,7-j,an[j],7-j,0,1);

                            if (an[j]<3)

                            box_apeak_xy(j,an[j]+1,j,7-j,an[j]+1,7-j,0,0);

                   }

                   for (j=0;j<4;j++)

                   {

                            if (an[j]>0)

                            an[j]--;

                   }

                   delay(a);

         }

         //7

         i=3;

         for (j=0;j<4;j++)

         an[j]=3-j;

         an[0]=2;

         while(i--)

         {

                   for (j=0;j<3;j++)

                   {

                            if (an[j]>=0)

                                     box_apeak_xy(j,an[j],j,7-j,an[j],7-j,0,1);

                            if (an[j]>=0)

                                     box_apeak_xy(j,an[j]+1,j,7-j,an[j]+1,7-j,0,0);

                   }

                   for (j=0;j<4;j++)

                   {

                            if (j<5-i)

                            an[j]--;

                   }

                   delay(a);

         }

         //8

         i=10;

         for (j=0;j<4;j++)

                   an[j]=j-2;

         while(i--)

         {

                   for (j=0;j<4;j++)

                   {

                            if (an[j]>=0)

                            box_apeak_xy(j,an[j],j,7-j,an[j],7-j,0,1);

                            if (an[j]>=0)

                            box_apeak_xy(j,an[j]-1,j,7-j,an[j]-1,7-j,0,0);

                   }

                   for (j=0;j<4;j++)

                   {

                            if (an[j]<7)

                            an[j]++;

                   }

                   delay(a);

         }

}
void flash_13()
{
  	clear(0);
	type(8,7);	   //I
	delay(1000);
	trailler2(10000); //向前移动调用	   
	delay(65000);
	ztransss();
	delay(10000);
	ztransss();
	delay(10000);
	ztransss();
	delay(10000);
	ztransss();
	delay(10000);
	ztransss();
	delay(10000);
	ztransss();
	delay(10000);
	ztransss();
	
	clear(0);	
	type(9,7);	   //L
	delay(1000);
	trailler2(10000);  //向前移动调用
	delay(65000);	
	transss();
	delay(10000);
	transss();
	delay(10000);
	transss();
	delay(10000);
	transss();
	delay(10000);
	transss();
	delay(10000);
	transss();
	delay(10000);
	transss();

	type(10,7);	   //Y
	delay(1000);
	trailler2(10000);	//向前移动
	delay(65533);
	trans(0,1800);
	trans(1,1800);
	trans(2,1800);
	trans(3,1800);
	trans(4,1800);
	trans(5,1800);
	trans(6,1800);
	trans(7,1800);

	type(0,7);	   //心
	delay(1000);
	trailler2(10000);	//向前移动
	delay(65000);
	ytrans(0,1800);
	ytrans(1,1800);
	ytrans(2,1800);
	ytrans(3,1800);
	ytrans(4,1800);
	ytrans(5,1800);
	ytrans(6,1800);
	ytrans(7,1800);



}

/**************************************************************************
****************************************************************************
*****************************************************************************/



void move(uchar *a,char kind,char direction,char length)//length不能为8
//kind=0 x轴,1 x轴,2 z轴；direction=0,负向,1正向
{
	char i,j;
	if(kind==0)
	{
		if(direction==1)
			for(i=0;i<64;i++)
				a[i]<<=length;
		else
			for(i=0;i<64;i++)
				a[i]>>=length;	
	}
	else if(kind==1)
	{
		if(direction==1)
			for(j=0;j<8;j++)
			{
				for(i=7;i>=length;i--)
					a[i+j*8]=a[i-length+j*8];
				for(i=0;i<length;i++)
					a[i+j*8]=0;			
			}	
		else
			for(j=0;j<8;j++)
			{
				for(i=0;i<length;i++)
					a[i+j*8]=a[i+length+j*8];
				for(i=(8-length);i<8;i++)
					a[i+j*8]=0;			
			}			
	}
	else
	{
		if(direction==1)
			for(j=0;j<8;j++)
			{
				for(i=7;i>=length;i--)
					a[j+i*8]=a[j+(i-length)*8];
				for(i=0;i<length;i++)
					a[j+i*8]=0;			
			}	
		else
			for(j=0;j<8;j++)
			{
				for(i=0;i<(8-length);i++)
					a[j+i*8]=a[j+(i+length)*8];
				for(i=(8-length);i<8;i++)
					a[j+i*8]=0;			
			}	
	}
}



void jb0(char num,char v)///////////////////////////////
{
	char i,k;
	uchar c[64]={0};
	for(i=0;i<64;i++)
		c[i]=0x80;
	zhen(c,v);
	while(num--)
		for(i=0;i<28;i++)
		{
			if(i<7)
				for(k=0;k<8;k++)
				{
					c[k*8]|=(0x80>>(i+1));
					c[k*8+7-i]=0;
				}
			else if(i<14)
				for(k=0;k<8;k++)
				{
					c[k*8+i-6]=0x01;
					c[k*8]>>=0x01;
				}
			else if(i<21)
				for(k=0;k<8;k++)
				{
					c[k*8+i-14]=0;
					c[k*8+7]|=(0x01<<(i-13));
				}
			else if(i<28)
				for(k=0;k<8;k++)
				{
					c[k*8+27-i]=0x80;
					c[k*8+7]<<=1;
				}
			zhen(c,v);
		}
	clc();
}	   
void link_pingmian1(char v)
{
	uchar a[64]={0};
	char i,j;
	for(i=0;i<8;i++)
		for(j=0;j<8;j++)
		{
			a[7*8+j]|=(0x01<<i);
			zhen(a,v);
		}
}
void pingmian1(char num,char v)
{
	char i,k;
	uchar a[64]={0};
	for(i=0;i<8;i++)
		a[7*8+i]=0xff;
	zhen(a,v);
	while(num--)
		for(i=0;i<28;i++)
		{
			if(i<7)
				for(k=0;k<8;k++)
				{
					a[(6-i)*8+k]=0x01;
					a[7*8+k]>>=1;
				}
			else if(i<14)
				for(k=0;k<8;k++)
				{
					a[k]|=0x01<<(i-6);
					a[(14-i)*8+k]=0;
				}
			else if(i<21)
				for(k=0;k<8;k++)
				{
					a[(i-13)*8+k]=0x80;
					a[k]<<=1;
				}	
			else 
				for(k=0;k<8;k++)
				{
					a[7*8+k]|=0x80>>(i-20);
					a[(i-21)*8+k]=0;
				}
			zhen(a,v);
		}
	clc();
}

void produce_cube(uchar *a,char n)//0<=n<=8
{
	char i,j;
	for(i=0;i<8;i++)
		for(j=0;j<8;j++)
		{
			if(j<n&&i<n)
				a[j+i*8]=0xff>>(8-n);
			else
				a[j+i*8]=0;
		}	
}
void produce_empty(uchar *a,char n)//0<n<=8,注意n不能为0
{
	char j;
	uchar p;
	for(j=0;j<64;j++)
		a[j]=0;
	p=0xff>>(8-n);
/************X4列*************/
	a[(n-1)*8+n-1]=p;
	a[(n-1)*8]=p;
	a[0]=p;
	a[n-1]=p;
	for(j=0;j<n;j++)
	{
		p=(0x01|(0x01<<(n-1)));
/************竖直4列*************/
		a[j*8]|=p;
		a[j*8+n-1]|=p;
/************Y4列*************/
		a[j]|=p;
		a[(n-1)*8+j]|=p;
	}
}
void cube(char empty,char kind,char v)
{
	uchar a[64]={0};
	char i;
	for(i=1;i<=8;i++)//生成
	{
		if(empty==0)
			produce_cube(a,i);
		else
			produce_empty(a,i);
		if(kind==0)
			{;}
		else if(kind==1)
			move(a,1,1,8-i);
		else if(kind==2)
		{
			move(a,1,1,8-i);
			move(a,0,1,8-i);
		}
		else
			move(a,0,1,8-i);
		zhen(a,v);
	}
	for(i=7;i>0;i--)//退出
	{
		if(empty==0)
			produce_cube(a,i);
		else
			produce_empty(a,i);
		if(kind==0)
		{
			move(a,1,1,8-i);
			move(a,0,1,8-i);
		}
		else if(kind==1)
			move(a,0,1,8-i);
		else if(kind==2)
			{;}
		else
			move(a,1,1,8-i);				
		zhen(a,v);
	}
}
/***************************************************************************/
  void yinchu(uchar *table,char n,char v)
{
/****************************
n为帧数
******************************/
	char i,j,k;
	uchar a[64]={0},p;
	for(k=0;k<n;k++)
	{
		for(i=0;i<8;i++)
		{
			p=0xff;
			for(j=0;j<64;j++)
			{
				a[j]=(table[j+k*64]|(0x80>>i))&(p<<(7-i));
			}
	
			zhen(a,v);	
		}
		zhen(table+k*64,25);
	}

} 

void rain(char menu,char num,char v)
{//menu=0,up;menu=1,down
	uchar a[64]={0};
	char i,j;
	if(menu==0)
	{
		for(i=0;i<8;i++)
			a[i]=tab_rain[i];
		zhen(a,v);
		for(i=1;i<8;i++)
		{
			move(a,2,1,1);
			for(j=0;j<8;j++)
				a[j]=tab_rain[i*8+j];
			zhen(a,v);
		}	
		while(num--)
		{	
			for(i=0;i<8;i++)
			{
				move(a,2,1,1);
				for(j=0;j<8;j++)
					a[j]=tab_rain[i*8+j];
				zhen(a,v);
			}
		}
	}
	else
	{
		for(i=0;i<8;i++)
			a[7*8+i]=tab_rain[i];
		zhen(a,v);
		for(i=1;i<8;i++)
		{
			move(a,2,0,1);
			for(j=0;j<8;j++)
				a[7*8+j]=tab_rain[i*8+j];
			zhen(a,v);
		}
		while(num--)
		{	
			for(i=0;i<8;i++)
			{
				move(a,2,0,1);
				for(j=0;j<8;j++)
					a[j+7*8]=tab_rain[i*8+j];
				zhen(a,v);
			}				
		}
	}
}

void pc1(char num,char v)
{
	uchar a[64]={0};
	char i,j;
	while(num--)
	{
		for(i=1;i<8;i++)
			a[i]=0xff;
		zhen(a,v);
		for(i=1;i<8;i++)
		{
			move(a,2,1,1);
			for(j=0;j<8;j++)
				a[j]=0xff;
			zhen(a,v);
		}
		for(i=0;i<8;i++)
		{
			if(num==0&&i==7)
				continue;
			move(a,2,1,1);
			zhen(a,v);
		}
	}
	for(i=0;i<7;i++)
	{
		move(a,2,0,1);
		zhen(a,v+5);
	}
}		
void link(char v)
{
/****************************
旋转衔接
******************************/
	char i,j,k;
	uchar a[64]={0};
	for(i=0;i<64;i++)
		a[i]=0x80;
	zhen(a,3);
	for(i=0;i<8;i++)
	{
		for(j=0;j<8;j++)
		{
			if(i<7)
				a[j*8+7-i]&=0x7f;
			a[j*8+i]|=(0x80>>i);
		}
		zhen(a,v);
	}
	for(i=0;i<6;i++)
	{
		for(j=0;j<8;j++)
			for(k=0;k<8;k++)
				a[j*8+k]=tab_xuanzhuantiao[(i+8)*8+k];
		zhen(a,3);
	}
}

void leitu(uchar *b,char num,char v)//V>1
{
	uchar a[64]={0},p;
	char i,j,k,m;
	for(m=0;m<num;m++)
	{
		for(i=0;i<8;i++)
			for(k=0;k<8;k++)
				for(j=0;j<8;j++)
				{
					p=b[m*64+i*8+k]&(0x01<<j);
					if(p)
					{
						a[i*8+k]|=p;
						zhen(a,v);
					}
				}
		zhen(a,60);
		for(j=0;j<64;j++)
		{
			if(!a[j])
				continue;
			a[j]=0;
			zhen(a,v-1);
		}
		delay(30);
	}
}
void fn(char v)
{
	uchar a[64]={0};
	int i;
	for(i=0;i<128;i++)//点
	{
		a[tab00[i]]=(0x01<<tab01[i]);
		zhen(a,v);
		a[tab00[i]]=0;
	}
	for(i=0;i<128;i++)//8点
	{
		a[tab10[i]]|=(0x01<<tab01[i]);
		if(i>=8)
			a[tab10[i-8]]^=(0x01<<tab01[i-8]);
		zhen(a,v);
	}
	a[tab00[0]]|=(0x01<<tab01[0]);
	a[0]=0x80;
	zhen(a,v);
	for(i=1;i<128;i++)//线
	{
		if(i<8)
			a[i-1]=0;
		a[tab00[i]]|=(0x01<<tab01[i]);
		zhen(a,v);
	}
	zhen(a,120);
	for(i=0;i<128;i++)//线
	{
		a[tab10[i]]^=(0x01<<tab01[i]);
		zhen(a,v);
	}
}	 
void xuanzhuantiao(char kind,char num,char v)//空心旋转,kind=1实心,否则空心
{
	uchar a[64]={0};
	char i,j,k;
	while(num--)
	{
		for(i=0;i<14;i++)
		{
			for(j=0;j<8;j++)
			{
				for(k=0;k<8;k++)
				{
					if(k>1&&k<6&&j>1&&j<6&&kind!=1)
						a[k+j*8]=tab_xuanzhuantiao[i*8+k]&0xc3;
					else
						a[k+j*8]=tab_xuanzhuantiao[i*8+k];
				}
			}
			zhen(a,v);
		}
	}
}

void qumianxuanzhuan(char kind,char num,char v)//曲面旋转
{
	uchar a[64]={0};
	char i,j,k;
	for(j=0;j<8;j++)
		for(i=0;i<8;i++)
			a[i+j*8]=tab_xuanzhuantiao[i];
	zhen(a,v);
	if(kind==1)
	{
		for(j=1;j<8;j++)//顺时针初形变换
		{
			for(i=0;i<j;i++)
				for(k=0;k<8;k++)
					a[k+i*8]=tab_xuanzhuantiao[(j-i)*8+k];
			zhen(a,v);
		}
		for(i=8;i<14;i++)
		{
			move(a,2,1,1);
			for(j=0;j<8;j++)
				a[j]=tab_xuanzhuantiao[i*8+j];
			zhen(a,v);
		}
	}
	else
	{
		for(j=1;j<8;j++)//逆时针初形变换
		{
			for(i=0;i<j;i++)
				for(k=0;k<8;k++)
					a[k+i*8]=tab_xuanzhuantiao[(14-j+i)*8+k];
			zhen(a,v);
		}
		for(i=7;i>=0;i--)
		{
			move(a,2,1,1);
			for(j=0;j<8;j++)
				a[j]=tab_xuanzhuantiao[i*8+j];
			zhen(a,v);
		}
	}

	while(num--)//主循环
	{
		if(kind==1)
			for(i=0;i<14;i++)
			{
				move(a,2,1,1);
				for(j=0;j<8;j++)
					a[j]=tab_xuanzhuantiao[i*8+j];
				zhen(a,v);
			}
		else
			for(i=13;i>=0;i--)
			{
				move(a,2,1,1);				
				for(j=0;j<8;j++)
					a[j]=tab_xuanzhuantiao[i*8+j];
				zhen(a,v);
			}
	}
	if(kind==1)
		for(j=0;j<7;j++)
		{
			for(i=7;i>=j;i--)
			{
				if(i>j)
					for(k=0;k<8;k++)
						a[k+i*8]=tab_xuanzhuantiao[(14-i+j)*8+k];
				else
					for(k=0;k<8;k++)
						a[k+i*8]=tab_xuanzhuantiao[k];
			}
			zhen(a,v);
		}
	else
		for(j=1;j<7;j++)
		{
			for(i=7;i>=j;i--)
			{
				if(i>j)
					for(k=0;k<8;k++)
						a[k+i*8]=tab_xuanzhuantiao[(i-j)*8+k];
				else
					for(k=0;k<8;k++)
						a[k+i*8]=tab_xuanzhuantiao[k];
			}
			zhen(a,v);
		}
}
void qumianxuanzhuan2(char num,char v)//曲面旋转
{
	uchar a[64]={0};
	char i,j,k;
	for(j=0;j<8;j++)
		for(i=0;i<8;i++)
			a[i+j*8]=tab_xuanzhuantiao[i];
	zhen(a,v);
	for(j=1;j<8;j++)
	{
		for(i=0;i<j;i++)
			for(k=0;k<8;k++)
				a[k+i*8]=tab_xuanzhuantiao[(14-j+i)*8+k];
		zhen(a,v);
	}
	while(num--)
	{
		for(j=1;j<8;j++)
		{
			move(a,2,1,1);
			for(i=0;i<j;i++)
			{
				for(k=0;k<8;k++)
				{
					if(j!=7|i!=0)
						a[i*8+k]=tab_xuanzhuantiao[k+(j+7-i)*8];
					else
						a[k]=tab_xuanzhuantiao[k];
				}
			}
			zhen(a,v);
		}
		for(j=1;j<8;j++)
		{
			move(a,2,1,1);
			for(i=0;i<j;i++)
			{
				for(k=0;k<8;k++)
					a[i*8+k]=tab_xuanzhuantiao[k+(14-j+i)*8];
			}
			zhen(a,v);
		}
	}
}


void hy(uchar *tab,char v)
{
	uchar a[64]={0};
	char i,j;
	for(i=0;i<8;i++)
		a[i*8]=tab[i];
	zhen(a,v);
	for(i=1;i<8;i++)
	{
	    for(j=0;j<8;j++)
		    a[i+j*8]=a[i-1+j*8];
	    zhen(a,v);
	}	
        for(i=0;i<7;i++)
	{
	    for(j=0;j<8;j++)
		    a[i+j*8]=0;
	    zhen(a,v);
	}
        zhen(a,20);	
}

void print(uchar *a,char m)//m=0中空显示,m=1实心显示
{
	uchar p;
	char i,j,k;
	uchar b[64]={0};
	for(i=0;i<8;i++)
	{
		b[7*8+i]=0xff;
	}	
	for(i=0;i<8;i++)//行切换
	{
		for(j=0;j<8;j++)//点移动
		{
			p=a[i]&(0x01<<j);
			if(p)
			{
				for(k=6;k>0;k--)
				{
					if(m==1&&k==6)
					{;}
					else
						b[(k+1)*8+7-i]&=(~p);
					b[k*8+7-i]|=(0x01<<j);
					zhen(b,1);
				}
				b[1*8+7-i]=0;
				b[7-i]|=p;
				zhen(b,1);
			}
			b[7-i]|=p;
		}
	}
	zhen(b,20);
	b[0]=0;
	for(j=7;j>0;j--)
	{
		for(i=7;i>0;i--)
		{
			b[i]=b[i-1];

		}
			zhen(b,5);		
	}
	clc();
} 

void water1(char x,char y,char v)
{
	uchar a[64]={0};
	char i,r;
	a[7*8+y]=0x01<<x;
	zhen(a,v);
	for(i=6;i>=0;i--)
	{
		a[i*8+y]=a[(i+1)*8+y];
		a[(i+1)*8+y]=0;
		zhen(a,v);
	}//下落
	for(r=0;r<7;r++)
	{
		for(i=0;i<8;i++)
			a[i]=tab_water[r*16+7-y+i]>>(7-x);
		zhen(a,v+3);
	}//扩散
}
void water2(char x1,char y1,char x2,char y2,char v)
{
	uchar a[64]={0};
	char i,r;
	a[7*8+y1]=0x01<<x1;
	zhen(a,v);
	for(i=6;i>=0;i--)
	{
		move(a,2,0,1);
		if(i==5)
		{
			a[7*8+y2]=0x01<<x2;			
		}
		zhen(a,v);
	}
	for(r=0;r<9;r++)
	{
		if(r<2)
			move(a,2,0,1);
		else
			for(i=0;i<8;i++)
				a[i]=tab_water[(r-2)*16+7-y2+i]>>(7-x2);		
		if(r<7)
			for(i=0;i<8;i++)
				a[i]|=(tab_water[r*16+7-y1+i]>>(7-x1));
		if(r==1)
			a[y2]|=0x01<<x2;
		zhen(a,v);
	}
}
void water3(char x1,char y1,char x2,char y2,char x3,char y3,char v)
{//3水滴
	uchar a[64]={0};
	char i,r;
	a[7*8+y1]=0x01<<x1;
	zhen(a,v);
	for(i=6;i>=0;i--)
	{
		move(a,2,0,1);
		if(i==5)//第二点
			a[7*8+y2]=0x01<<x2;	
		if(i==3)
			a[7*8+y3]=0x01<<x3;	//第三点		
		zhen(a,v);
	}
	for(r=0;r<11;r++)
	{
		if(r<4)
			move(a,2,0,1);
		if(r<11&&r>=4)
			for(i=0;i<8;i++)
				a[i]=tab_water[(r-4)*16+7-y3+i]>>(7-x3);
		if(r<9&&r>=2)
			for(i=0;i<8;i++)
				a[i]|=tab_water[(r-2)*16+7-y2+i]>>(7-x2);		
		if(r<7)
			for(i=0;i<8;i++)
				a[i]|=(tab_water[r*16+7-y1+i]>>(7-x1));
		if(r==1)
			a[y2]|=0x01<<x2;
		if(r==3)
			a[y3]|=0x01<<x3;
		zhen(a,v);
	}
}	 
void xuanzhuantiao2(char num,char v)//空心旋转,kind=1实心,否则空心
{
	uchar a[64]={0};
	char i,j,k;
	while(num--)
		for(i=0;i<56;i++)
		{
			for(j=0;j<8;j++)
				for(k=0;k<8;k++)
					a[j*8+k]=tab_xuanzhuantiao2[i*8+k];
			zhen(a,v);
		}
}

void flash0(char v)//条状升降
{
		char i,j,k;
		uchar a[64]={0};
		for(i=7;i>=0;i--)
		{
			a[i]=0x01<<i;
			zhen(a,v+10);
		}
		for(i=0;i<7;i++)
		{
			for(j=0;j<8;j++)
				a[j]=flash0__tab[i*8+j];
			zhen(a,v+10);
		}
		for(i=0;i<7;i++)
		{
			move(a,2,1,1);
			zhen(a,v+10);
		}
		for(i=0;i<64;i++)
		{
			if(i>55)
				a[i]=0xff;
			else
				a[i]=0;
		}
		zhen(a,20);
		for(i=7;i>=0;i--)//1
			for(j=6;j>=0;j--)
			{
				a[i+j*8]=0xff;
				a[i+(j+1)*8]=0;
				zhen(a,v);
			}
		zhen(a,20);
		for(i=7;i>=0;i--)//2
			for(j=1;j<8;j++)
			{
				a[i+j*8]=0xff;
				a[i+(j-1)*8]=0;
				zhen(a,v);
			}
		zhen(a,20);
		for(i=7;i>=0;i--)//3
			for(k=6;k>=0;k--)
			{
				for(j=0;j<8;j++)
				{
					if(k==0)
						a[j+k*8]|=(0x80>>(7-i));
					else
						a[j+k*8]=(0x80>>(7-i));
					a[j+(k+1)*8]^=(0x80>>(7-i));
				}
				zhen(a,v);
			}
		zhen(a,20);
		for(i=7;i>=0;i--)//4
			for(k=1;k<8;k++)
			{
				for(j=0;j<8;j++)
				{
					if(k==7)
						a[j+k*8]|=(0x80>>(7-i));
					else
						a[j+k*8]=(0x80>>(7-i));
					a[j+(k-1)*8]^=(0x80>>(7-i));
				}
				zhen(a,v);
			}
		zhen(a,20);
}	   
void donghua(uchar *tab,uchar num,uchar n,char v)
{
	char i;
	while(n--)
	{
		for(i=0;i<num;i++)//清空
		{
			zhen(tab+i*64,v);
		}
	}
}

void denghuo(char v)
{
	uchar a[64];
	char i,j,k;
	for(k=0;k<8;k++)
		for(i=0;i<8;i++)
			for(j=0;j<8;j++)
			{
				a[tab_mian[i]*8+tab_xian[j]]|=(0x01<<tab_dian[(i+j)*8+k]);
				zhen(a,v);
			}
		zhen(a,90);
	for(k=0;k<8;k++)
		for(i=0;i<8;i++)
			for(j=0;j<8;j++)
			{
				a[tab_mian[i]*8+tab_xian[j]]^=(0x01<<tab_dian[(i+j)*8+k]);
				zhen(a,v);
			}
}	
/***************************************/
void xzcube()
{
		char i;
		donghua(y_table,6,8,8);
		for(i=0;i<26;i++)
		{
			if(i==12||i==13||i==14)
				zhen(yx_table+i*64,30);
			else
				zhen(yx_table+i*64,14);
		}
		donghua(x_table,6,8,8);
		for(i=0;i<26;i++)
		{
			if(i==12||i==13||i==14)
				zhen(xz_table+i*64,30);
			else
				zhen(xz_table+i*64,14);
		}
		donghua(z_table,6,8,8);
}
void szfc0(char v)//数字上浮
{
	char i,j;
	uchar a[64];
	for(i=0;i<64;i++)
	{
		a[i]=0;
	}
	for(j=124;j>=0;j--)
	{
		for(i=7;i>=0;i--)
		{
			a[i*8+3]=szfc_table[j+i];
			a[i*8+4]=szfc_table[j+i];
		}
		zhen(a,v);
	}
}
void shandian(char v)
{
		char i,j;
		uchar a[64];
		for(i=0;i<64;i++)
			a[i]=tab_shandian[64*21+i];
		for(i=0;i<22;i++)
			zhen(tab_shandian+64*i,v+5);
		for(i=0;i<22;i++)
		{
			for(j=0;j<64;j++)
				a[j]=a[j]&(~tab_shandian[64*i+j]);
			zhen(a,v);
		}
}

void cut()
{
	uchar a[64]={0};
	char i;
	for(i=0;i<4;i++)
	{
		a[i*8+7]=0xff;
		a[(7-i)*8+7]=0xff;
		zhen(a,8);
	}
	zhen(a,30);
	for(i=3;i>=0;i--)
	{
		a[i*8+7]=0;
		a[(7-i)*8+7]=0;
		zhen(a,8);
	}
}	
void shensuo(uchar v)
{
	char i,j;
	uchar a[64]={0};
	for(i=0;i<64;i++)
		a[i]=0xff;
	for(i=0;i<7;i++)
	{
		move(a,0,0,1);
		zhen(a,v);
	}
	for(i=0;i<7;i++)
	{
		move(a,0,1,1);
		for(j=0;j<64;j++)
			a[j]|=0x01;
		zhen(a,v);
	}
	for(i=0;i<7;i++)
	{
		move(a,2,0,1);
		zhen(a,v);
	}
	for(i=0;i<7;i++)
	{
		move(a,2,1,1);
		for(j=0;j<8;j++)
			a[j]|=0xff;
		zhen(a,v);
	}
	for(i=7;i>0;i--)
	{
		for(j=0;j<8;j++)
			a[j*8+i]=0;
		zhen(a,v);
	}
	for(i=1;i<8;i++)
	{
		for(j=0;j<8;j++)
			a[j*8+i]|=0xff;
		zhen(a,v);
	}
}
  void linkpc1(char v)
{
	uchar i,a[64]={0};
	for(i=0;i<7;i++)
		a[7*8+i]=0xff;
	for(i=0;i<8;i++)
	{
		move(a,2,0,1);
		zhen(a,v);
	}
}
void link00()
{
	uchar a[64]={0};
	char i;
	for(i=10;i>7;i--)
	{
		zhen(bianxing_table+i*64,70);
	}
	produce_cube(a,6);
	move(a,1,1,1);
	move(a,0,1,1);
		
	zhen(a,110);
	produce_cube(a,8);
	zhen(a,110);
}
void link_jb0(char v)
{
	uchar a[64]={0};
	char i;
	for(i=0;i<64;i++)
	{
		a[i]=0x80;
		zhen(a,v);
	}
}
#include <STC12C5A60S2.H>
void main()
{ 	            unsigned int xdata i,j;
                initial595();
				initial5952();
		     	timer0init();
				BB=0;			
				bb=1;   
			  while(1)
	           { 	 
				   
					   TR1=1;
						clc();		        
						clear(0);
						flash_9();
						clear(0);
						flash_1();
						clear(0);
						flash_12();
						clear(0);
						flash_13();
						delay(65534);
						delay(65534);
						delay(65534);
						TR1=0;    	      		  
						//动画：倒计时98765443210		
						for(i=0;i<10;i++)
						hy(number+27*8+i*8,6);
						cut();													
						//金字塔点灯旋转																			
						fn(4);
						flash0(2);
						flash0(1);
						//单层上下
						linkpc1(10);			
						pc1(4,3);			
						leitu(yc_table,5,2);	//I ai U			
						denghuo(1);		//万家灯火	
						//水滴		 	
						water1(1,2,10);water1(2,4,10);				
						water1(4,3,10);
						water1(7,1,10);		
						water1(5,6,10);			
						water2(0,2,7,1,9);			
						water2(2,4,7,7,9);	
						water2(4,7,7,1,9);
						water2(3,6,7,7,9);
						water2(4,1,6,6,9);		
						water2(7,3,1,2,9);
						water3(0,4,7,4,5,1,9);
						water3(7,7,0,0,0,7,9);
						water3(0,6,6,6,5,1,9);
						water3(6,7,0,0,2,2,9);
						water3(3,3,6,6,2,2,9);
						//下降显字		
						for(i=0;i<7;i++)
						print(tab_print+i*8,1);
						for(i=7;i<11;i++)
						print(tab_print+i*8,0);				
						//来回转动			
						clc();
						link_pingmian1(1);
						pingmian1(8,3);			
						//360度单面走
						clc();
						link_jb0(1);
						jb0(10,3);			
						//左右显字
						yinchu(yc_table,5,15);					
						//360度单面走			
						clc();
						link_jb0(1);
						jb0(10,3);			
						//旋转条1			
						link(9);
						xuanzhuantiao(1,8,4);
						xuanzhuantiao(0,8,4);										
						//旋转条2			
						xuanzhuantiao2(3,4);						
						//曲面旋转			
						qumianxuanzhuan(1,10,3);
						qumianxuanzhuan(0,10,3);									
						//曲面旋转2			
						qumianxuanzhuan2(13,4);
						//旋转条			
						xuanzhuantiao(1,4,4);
						xuanzhuantiao(1,3,5);
						xuanzhuantiao(1,2,6);
						xuanzhuantiao(1,1,7);			
						//雪花旋转			
						donghua(bianxing_table,11,1,24);
						xzcube();
						donghua(y_table,6,5,5);
						donghua(x_table,6,5,5);
						donghua(z_table,6,5,5);
						link00();		
						//伸缩			
						shensuo(5);			
						//波浪		
						donghua(sin_cube_table,14,22,5);			
						//方框收缩			
						for(i=0;i<3;i++)
						for(j=0;j<3;j++)
						cube(0,j,6);
						for(i=0;i<3;i++)
						for(j=0;j<3;j++)
						cube(1,j,6);					
						donghua(hart_table,2,10,32);//心跳动						
						//闪电楼梯			
						for(i=2;i>0;i--)
						shandian(i);		
						//字母上升9-0			
						szfc0(10);		
						//上升沿			
						rain(1,10,9);										
						TR1=1;
						clear(0);	    
						flash_5();
						clear(0);
						roll_apeak_yz(1,5000);
						roll_apeak_yz(2,5000);
						roll_apeak_yz(3,5000);	    
						roll_apeak_yz(0,5000);
						roll_apeak_xy(2,5000);
						roll_apeak_xy(3,5000);
						roll_apeak_xy(0,5000);
						roll_apeak_xy(1,5000);	
						
						clear(0);
						flash_12();
						clear(0);
						flash_2();
						clear(0);
						flash_3();
						clear(0);
						flash_10();
						clear(0);
						flash_4();
						clear(0);
						flash_5();	   
						clear(0);
						flash_6();
						clear(0);
						flash_7();
						clear(0);
						flash_8();
						clear(0);
						flash_9();
						clear(0);
						flash_10();
						clear (0);
						flash_11();
						clear(0);
						flash_5();
						clear(0);
						flash_7();
						clear(0);
						flash_6();
						clear(0);
						flash_8();
						clear(0);
						flash_9();
						clear(0);
						flash_12();     			 
                  
			  }	  
}

 void print1() interrupt 3
{  
  	        uchar i;				
		        static uchar layer=0;     
		      for (i=0;i<8;i++)
		       {
		        buffer[i]=~display[layer][i];
		       }
			        xiansi1();									  			 	  		  	  
				    cheng=(0x01<<layer);			  
				    DS2 = ~cheng&0x01; //发送最低位	 
					SH_CP2 = 1;
					SH_CP2 = 0;		 //移位寄存器移位
					ST_CP=1;	
				    ST_CP=0;	
					ST_CP2=1;	
				    ST_CP2=0;
				
				if (layer<7) 
			        layer++;
		        else 
	                layer=0;       
				    TH1=0xfe;
			    	TL1=0xfe;
					delay(2);
	 							
		   			   
}	
